<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql读写分离</title>
      <link href="/2019/07/05/mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
      <url>/2019/07/05/mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<p>数据库读写分离对于大型系统或者访问量很高的互联网应用来说，是必不可少的一个重要功能。</p><a id="more"></a><p>从数据库的角度来说，对于大多数应用来说，从集中到分布，最基本的一个需求不是数据存储的瓶颈，而是<br>在于计算的瓶颈，即 SQL 查询的瓶颈，我们知道，正常情况下，Insert SQL 就是几十个毫秒的时间内写入完成，<br>而系统中的大多数 Select SQL 则要几秒到几分钟才能有结果，很多复杂的 SQL，其消耗服务器 CPU 的能力超强，<br>不亚于死循环的威力。在没有读写分离的系统上，很可能高峰时段的一些复杂 SQL 查询就导致数据库服务器 CPU<br>爆表，系统陷入瘫痪，严重情况下可能导致数据库崩溃。因此，从保护数据库的角度来说，我们应该尽量避免没<br>有主从复制机制的单节点数据库。</p><p>对于 MySQL 来说，标准的读写分离是主从模式，一个写节点 Master 后面跟着多个读节点，读节点的数量取<br>决于系统的压力，通常是 1-3 个读节点的配置，如下图所示：<br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/07/05/1562319141494.png" alt="1562319141494"></p><p>MySQL 支持更多的主从复制的拓扑关系，如下图所示，但通常我们不会采用双向主从同步以及环状的拓扑：<br>MySQL 主从复制的原理如下：</p><p><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/07/05/1562321649762.png" alt="1562321649762"></p><p>Mysql主从复制的原理如下：</p><ul><li>主库上开启二进制日志记录功能。在每次提交事务完成数据更新前，主库将数据更新的事件写入二进制日志中。Mysql会按事务提交的顺序而非每条语句的执行顺序来记录二进制日志。</li><li>从库将主库的二进制日志复制到其本地的中继日志中，从库从中继日志中读取事件并在从库中执行，从而实现从库数据的更新。</li></ul><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>主库：  192.168.23.139</p><p>从库1：192.168.23.140</p><p>从库2：192.168.23.141</p><p>每台服务器上安装一个Mysql服务。</p><h4 id="实现读写分离"><a href="#实现读写分离" class="headerlink" title="实现读写分离"></a>实现读写分离</h4><ol><li><p>开启主库的二进制日志记录功能。</p><p>在主库上，启用 “binary logging” 并配置唯一的 “server ID”（需要重启服务）<br>打开 <code>my.cnf</code> 或者 <code>my.ini</code> 文件，添加如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">// 启用BinaryLog，配置log文件名为 &apos;mysql-bin&apos;</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">// 全局唯一的ServerId用来标示服务器在主从集群中的位置</span><br><span class="line">server-id=1</span><br></pre></td></tr></table></figure><p>这里的 <code>my.cnf</code> 文件的位置可以用 <code>mysqld --help --verbose</code> 看到。</p></li><li><p>在每个Slave上，配置唯一的 “server ID” （需要重启服务）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=2</span><br></pre></td></tr></table></figure><p>采用同样的方式，给每台Slave服务编号（注意要重启服务！）。从库一般不需要开启BinaryLog，但是可以配置一台Slave开启BinaryLog，留作数据备份之用。</p></li><li><p>（可选）在主库创建一个用来给 Slave 访问 Master 日志（binarylog）的用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER &apos;slave&apos;@&apos;192.168.23.139&apos; IDENTIFIED BY &apos;slavepass&apos;;</span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO &apos;slave&apos;@&apos;192.168.23.139&apos;;</span><br></pre></td></tr></table></figure><p>在Master上创建用户 ‘slave’，并赋予 ‘REPLICATION SLAVE’ 的权限，这样Slave可以通过用户名/密码的方式访问Master</p></li><li><p>在开始主从复制之前，需要先记录Master上的日志的当前位置（这样Slave才知道从哪儿开始执行BinaryLog中的事件）<br>在Master上执行 <code>mysql &gt; SHOW MASTER STATUS;</code> 可以看到日志的信息（前提是已经启用了BinaryLog，否则是空）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000003 |      702 | ifast        |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>另外在这步操作时，需要先锁住数据库，避免在这时候产生数据的变化 <code>FLUSH TABLES WITH READ LOCK;</code>，这一步需要非常小心。参考<a href="">官方文档</a>(<a href="https://dev.mysql.com/doc/refman/5.7/en/replication-howto-masterstatus.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/replication-howto-masterstatus.html</a>)</p></li><li><p>如果Master上已经有很多数据了，可以先把Master上的数据拷贝到Slave上。这一步的做法太多，如果我们的主从设计是从头开始的，没有遗留数据的烦恼，那么可以略过。</p></li><li><p>在Slave上配置相关设置，以便告诉Slave如何去连接Master，这包括主机地址，登陆凭证等等<br>执行如下语句，设置相关的环境信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CHANGE MASTER TO</span><br><span class="line">    -&gt;     MASTER_HOST=&apos;主库的IP&apos;,</span><br><span class="line">    -&gt;     MASTER_USER=&apos;上面建立的用户名&apos;,</span><br><span class="line">    -&gt;     MASTER_PASSWORD=&apos;上面建立的密码&apos;,</span><br><span class="line">    -&gt;     MASTER_LOG_FILE=&apos;mysql-bin.000003&apos;,</span><br><span class="line">    -&gt;     MASTER_LOG_POS=702;</span><br></pre></td></tr></table></figure><p>走完这一圈，整个配置完毕了，如果有新的Slave需要添加到集群中，可以先关闭一台Slave，把数据Copy过来，导入新的Slave在启动配置。</p></li></ol><p>这是基本的主从配置大概步骤，对于生产环境还会有更复杂情况，</p><ol><li>全新的Master和Slave，一切从头开始的情况</li><li>全新的Master，但是已经有了一些数据需要导入，并配置Slave</li><li>Master已经配置了Slave，这时候追加一些Slave</li></ol><p>对于这些情况，如何处理，<a href="https://dev.mysql.com/doc/refman/5.7/en/replication.html" target="_blank" rel="noopener">详见文档</a>，在此不再赘述。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用mycat对mysql分库分表</title>
      <link href="/2019/07/04/%E4%BD%BF%E7%94%A8mycat%E5%AF%B9mysql%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/"/>
      <url>/2019/07/04/%E4%BD%BF%E7%94%A8mycat%E5%AF%B9mysql%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近发现项目越做越大，数据也随之越来越多，并发大了就进行负载均衡，搭建项目集群；处理慢了就使用异步请求。所以项目还勉强能撑的下去。但是还有一个问题至今都没有解决，这就是数据库的并发，数据库单表在不影响性能的情况下只能存储200万数据，一旦超过了这个阈值就会降低数据库的性能。目前分库分表方案的产品有很多。如下所示：</p><a id="more"></a><p><img src="https://user-gold-cdn.xitu.io/2018/7/30/164e9fe9ff548c7e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>而今天要说的Mycat就是基于Cobar实现分库分表的，Mycat的架构其实很好理解，Mycat是代理，Mycat后面就是物理数据库。和Web服务器的Nginx类似。对于使用者来说，访问的都是Mycat，不会接触到后端的数据库。</p><p>目前只有1.6.5版本以上支持单库分表。其他版本只支持分库分表。<strong>两者是有区别的</strong>（被坑惨）</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>进入<a href="http://www.mycat.io/" target="_blank" rel="noopener">官网</a>进行下载 </p><p><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/07/04/TIM%E6%88%AA%E5%9B%BE20190704163011.png" alt="下载示例图"></p><p>Mycat有一个<a href="http://www.mycat.io/document/mycat-definitive-guide.pdf" target="_blank" rel="noopener">官方文档</a>，初次入门，读起来比较费劲。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>根据不同的系统选择不同的版本。包括linux、windows、mac,作者考虑还是非常周全的，当然，也有源码版的。（ps:源码版的下载后，只要配置正确，就可以正常运行调试，这个赞一下。）</p><p><img src="https://ask.qcloudimg.com/http-save/1438107/h3q2nlftiz.jpeg?imageView2/2/w/1620" alt=""></p><p>Mycat的安装其实只要解压下载的目录就可以了，非常简单。  </p><p>安装完成后，目录如下：</p><table><thead><tr><th style="text-align:left">目录</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">bin</td><td style="text-align:left">mycat命令，启动、重启、停止等</td></tr><tr><td style="text-align:left">catlet</td><td style="text-align:left">catlet为Mycat的一个扩展功能</td></tr><tr><td style="text-align:left">conf</td><td style="text-align:left">Mycat 配置信息,重点关注</td></tr><tr><td style="text-align:left">lib</td><td style="text-align:left">Mycat引用的jar包，Mycat是java开发的</td></tr><tr><td style="text-align:left">logs</td><td style="text-align:left">日志文件，包括Mycat启动的日志和运行的日志。</td></tr></tbody></table><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>Mycat的配置文件都在conf目录里面，这里介绍几个常用的文件：</p><table><thead><tr><th style="text-align:left">文件</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">server.xml</td><td style="text-align:left">Mycat的配置文件，设置账号、参数等</td></tr><tr><td style="text-align:left">schema.xml</td><td style="text-align:left">Mycat对应的物理数据库和数据库表的配置</td></tr><tr><td style="text-align:left">rule.xml</td><td style="text-align:left">Mycat分片（分库分表）规则</td></tr></tbody></table><ol><li><p>首先配置server.xml</p><blockquote><p>vim /etc/home/mycat/conf/server.xml</p></blockquote><p>配置用户名密码和数据库名,表级权限等以后深入的时候再看看（没什么好说的）<img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/07/04/TIM%E6%88%AA%E5%9B%BE20190704165342.png" alt=""></p></li><li><p>配置schema.xml</p></li></ol><p>首先说下这个文件里面的三个大节点</p><ul><li><p>schema节点是用来配置这个数据里面哪些表需要进行分库分表，以及拆分方式。</p></li><li><p>dataNode节点是用来配置分几个库的，需要分几个库就写几个节点。</p></li><li>dataHost节点是用来配置库的类型、连接方式以及是否要独写分离。（有点模糊不清，具体看官方文档）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mycat:schema SYSTEM "schema.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">"http://io.mycat/"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">"ifast"</span> <span class="attr">checkSQLschema</span>=<span class="string">"true"</span> <span class="attr">sqlMaxLimit</span>=<span class="string">"1000"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">dataNode</span>=<span class="string">"dn1,dn2"</span> <span class="attr">primaryKey</span>=<span class="string">"id"</span> <span class="attr">rule</span>=<span class="string">"mod-long"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"dn1"</span> <span class="attr">dataHost</span>=<span class="string">"192.168.23.139"</span> <span class="attr">database</span>=<span class="string">"ifast"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"dn2"</span> <span class="attr">dataHost</span>=<span class="string">"192.168.23.140"</span> <span class="attr">database</span>=<span class="string">"ifast"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"192.168.23.139"</span> <span class="attr">maxCon</span>=<span class="string">"1000"</span> <span class="attr">minCon</span>=<span class="string">"10"</span> <span class="attr">balance</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">writeType</span>=<span class="string">"0"</span> <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span> <span class="attr">switchType</span>=<span class="string">"1"</span>  <span class="attr">slaveThreshold</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定时探活 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- can have multi write hosts --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"192.168.23.139"</span> <span class="attr">url</span>=<span class="string">"192.168.23.139:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">password</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- can have multi read hosts --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">"192.168.23.139"</span> <span class="attr">url</span>=<span class="string">"192.168.23.139:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"192.168.23.140"</span> <span class="attr">maxCon</span>=<span class="string">"1000"</span> <span class="attr">minCon</span>=<span class="string">"10"</span> <span class="attr">balance</span>=<span class="string">"0"</span> <span class="attr">writeType</span>=<span class="string">"0"</span> <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user();<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"192.168.23.140"</span> <span class="attr">url</span>=<span class="string">"192.168.23.140:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- can have multi read hosts --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">"192.168.23.140"</span> <span class="attr">url</span>=<span class="string">"192.168.23.140:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>schema name要和server.xml对应上。</p><p>user表设置分库2个，但所以设置2个dataNote。</p><p>rule采用取模模式mod-long。表示article 分区配置，按照id进行路由。</p><p>writeHost和readHost设为同一数据库。</p><ol start="3"><li>配置rule.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">"dankufenbiao-mod-long"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">columns</span>&gt;</span>UserId<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>dankufenbiao-mod-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">"dankufenbiao-mod-long"</span> <span class="attr">class</span>=<span class="string">"io.mycat.route.function.PartitionByMod"</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- how many data nodes --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"count"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启动Mycat"><a href="#启动Mycat" class="headerlink" title="启动Mycat"></a>启动Mycat</h4><p>启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mycat start</span><br></pre></td></tr></table></figure><p>停止：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mycat stop</span><br></pre></td></tr></table></figure><p>查看启动状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mycat status</span><br></pre></td></tr></table></figure><p>重启（改变上面的xml配置不用重启，管理端可以重新载入）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mycat restart</span><br></pre></td></tr></table></figure><p>查看logs/下的wrapper.log和mycat.log可以查看运行时问题和异常。</p><p>mycat启动日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f ../logs/wrapper.log</span><br></pre></td></tr></table></figure><p>mycat 应用日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f ../logs/mycat.log</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol><li>mysql创建ifast数据库，user表。</li><li>连接mycat, 端口：8066，账号：root, 密码：root</li><li>执行sql语句，查看执行过程。</li></ol><p><strong>执行sql</strong></p><p><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/07/04/TIM%E6%88%AA%E5%9B%BE20190704173139.png" alt=""></p><p><strong>查看表</strong></p><ul><li>查看192.168.23.139的数据库</li></ul><p><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/07/04/TIM%E6%88%AA%E5%9B%BE20190704173349.png" alt=""></p><ul><li>查看192.168.23.140的数据库</li></ul><p><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/07/04/TIM%E6%88%AA%E5%9B%BE20190704173403.png" alt=""></p><p>可以发现Mycat已经自动帮我们将数据分好库了。</p><p>具体细节可以参考<a href="http://www.mycat.io/document/mycat-definitive-guide.pdf" target="_blank" rel="noopener">官方文档</a>，全中文的哦。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
          <category> 分库分表 </category>
          
          <category> mycat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Mycat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于storm处理kafka数据</title>
      <link href="/2019/07/03/%E5%9F%BA%E4%BA%8Estorm%E5%A4%84%E7%90%86kafka%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/07/03/%E5%9F%BA%E4%BA%8Estorm%E5%A4%84%E7%90%86kafka%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>最近有个项目需要将kafka中的数据进行去重然后保存到Mongo中，由于数据量太大所以首选使用storm进行实时处理。这里主要记录是关于kafka和storm的整合。</p><a id="more"></a><h4 id="关于storm"><a href="#关于storm" class="headerlink" title="关于storm"></a>关于storm</h4><blockquote><p>Storm是一个免费开源、分布式、高容错的实时计算系统。Storm令持续不断的流计算变得容易，弥补了Hadoop批处理所不能满足的实时要求。Storm经常用于在实时分析、在线机器学习、持续计算、分布式远程调用和ETL等领域。Storm的部署管理非常简单，而且，在同类的流式计算工具，Storm的性能也是非常出众的。</p></blockquote><h4 id="关于kafka"><a href="#关于kafka" class="headerlink" title="关于kafka"></a>关于kafka</h4><blockquote><p>Kafka是一种高吞吐量的分布式发布订阅消息系统。</p></blockquote><h4 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h4><p>使用maven进行jar包集成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">        &lt;kafka.version&gt;1.0.0&lt;/kafka.version&gt;</span><br><span class="line">        &lt;storm.version&gt;1.2.1&lt;/storm.version&gt;</span><br><span class="line">        &lt;fastjson.version&gt;1.2.41&lt;/fastjson.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--kafka jar --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;kafka_2.12&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;kafka.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;kafka.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;kafka-streams&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;kafka.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--storm相关jar  --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.storm&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;storm-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;storm.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;!--排除相关依赖  --&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;!--&lt;exclusion&gt;--&gt;</span><br><span class="line">                    &lt;!--&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;--&gt;</span><br><span class="line">                    &lt;!--&lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;--&gt;</span><br><span class="line">                &lt;!--&lt;/exclusion&gt;--&gt;</span><br><span class="line">                &lt;!--&lt;exclusion&gt;--&gt;</span><br><span class="line">                    &lt;!--&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;--&gt;</span><br><span class="line">                    &lt;!--&lt;artifactId&gt;log4j-1.2-api&lt;/artifactId&gt;--&gt;</span><br><span class="line">                &lt;!--&lt;/exclusion&gt;--&gt;</span><br><span class="line">                &lt;!--&lt;exclusion&gt;--&gt;</span><br><span class="line">                    &lt;!--&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;--&gt;</span><br><span class="line">                    &lt;!--&lt;artifactId&gt;log4j-web&lt;/artifactId&gt;--&gt;</span><br><span class="line">                &lt;!--&lt;/exclusion&gt;--&gt;</span><br><span class="line">                &lt;!--&lt;exclusion&gt;--&gt;</span><br><span class="line">                    &lt;!--&lt;groupId&gt;org.slf4j&lt;/groupId&gt;--&gt;</span><br><span class="line">                    &lt;!--&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;--&gt;</span><br><span class="line">                &lt;!--&lt;/exclusion&gt;--&gt;</span><br><span class="line">                &lt;!--&lt;exclusion&gt;--&gt;</span><br><span class="line">                    &lt;!--&lt;artifactId&gt;ring-cors&lt;/artifactId&gt;--&gt;</span><br><span class="line">                    &lt;!--&lt;groupId&gt;ring-cors&lt;/groupId&gt;--&gt;</span><br><span class="line">                &lt;!--&lt;/exclusion&gt;--&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.storm&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;storm-kafka&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;storm.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Protocol Buffers --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.protobuf&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;protobuf-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.8.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/com.codahale.metrics/metrics-core --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.codahale.metrics&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;metrics-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.0.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--fastjson 相关jar --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- MongoDB连接驱动 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mongodb&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.7.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.0.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h4 id="Topology"><a href="#Topology" class="headerlink" title="Topology"></a>Topology</h4><p>创建一个启动类，程序启动时最先启动它。</p><ul><li><p>并在main方法中声明config对象，配置nimbus主机、zookeeper集群、worker数量等。</p></li><li><p>声明TopologyBuilder类最要是用来配置spout和bolt（spout和bolt使用自定义的类，方便数据处理）</p></li><li>如果是在本地启动则声明LocalCluster对象，如果是在生产环境中使用需要提交至Nimbus服务器上启动。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopologyMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(TopologyMain.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        config.put(Config.NIMBUS_HOST, Constants.STORM_SERVER); <span class="comment">//配置nimbus连接主机地址，比如：192.168.10.1</span></span><br><span class="line">        config.put(Config.NIMBUS_THRIFT_PORT, <span class="number">6627</span>);<span class="comment">//配置nimbus连接端口，默认 6627</span></span><br><span class="line">        config.put(Config.STORM_ZOOKEEPER_SERVERS, Arrays.asList(Constants.ZKSERVERS)); <span class="comment">//配置zookeeper连接主机地址，可以使用集合存放多个</span></span><br><span class="line">        config.put(Config.STORM_ZOOKEEPER_PORT, <span class="number">2181</span>); <span class="comment">//配置zookeeper连接端口，默认2181</span></span><br><span class="line">        config.setDebug(<span class="keyword">true</span>);</span><br><span class="line">        config.setNumWorkers(<span class="number">30</span>);</span><br><span class="line">        config.setMaxSpoutPending(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        TopologyBuilder builder = <span class="keyword">new</span> TopologyBuilder();</span><br><span class="line">        builder.setSpout(<span class="string">"spout"</span>, <span class="keyword">new</span> KafkaDataSpout(), <span class="number">3</span>);</span><br><span class="line">        builder.setBolt(<span class="string">"bolt"</span>, <span class="keyword">new</span> DataParseBolt(), <span class="number">3</span>).shuffleGrouping(<span class="string">"spout"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 运行拓扑</span></span><br><span class="line">            <span class="comment">// 有参数时，表示向集群提交作业，并把第一个参数当做topology名称</span></span><br><span class="line">            <span class="comment">// 没有参数时，本地提交</span></span><br><span class="line">            <span class="keyword">if</span> (args != <span class="keyword">null</span> &amp;&amp; args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                logger.info(<span class="string">"运行远程模式"</span>);</span><br><span class="line">                StormSubmitter.submitTopology(args[<span class="number">0</span>], config, builder.createTopology());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 启动本地模式</span></span><br><span class="line">                logger.info(<span class="string">"运行本地模式"</span>);</span><br><span class="line">                LocalCluster cluster = <span class="keyword">new</span> LocalCluster();</span><br><span class="line">                cluster.submitTopology(<span class="string">"TopologyApp"</span>, config, builder.createTopology());</span><br><span class="line"><span class="comment">//Thread.sleep(20000);</span></span><br><span class="line">                <span class="comment">// //关闭本地集群</span></span><br><span class="line"><span class="comment">//cluster.shutdown();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spout"><a href="#Spout" class="headerlink" title="Spout"></a>Spout</h4><p>可以把它看出生产者，专门用来获取数数据的，由于我们的数据来源于kafka中，所以需要在这里连接kafka并将数据下发至bolt中。</p><ul><li>初始化kafka，获取到kafka连接对象。</li><li>读取kafka数据，由于kafka中存储的是Protocol Buffer格式的数据，所以使用byte方式读取，准备在bolt中解析。</li><li>下发至bolt</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pancm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: KafkaDataSpout</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 从kafka获取新增数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>:1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018年4月19日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaDataSpout</span> <span class="keyword">extends</span> <span class="title">BaseRichSpout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2548451744178936478L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(KafkaDataSpout.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SpoutOutputCollector collector;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> KafkaConsumer&lt;String, <span class="keyword">byte</span>[]&gt; consumer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConsumerRecords&lt;String, <span class="keyword">byte</span>[]&gt; msgList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Map map, TopologyContext arg1, SpoutOutputCollector collector)</span> </span>&#123;</span><br><span class="line">        kafkaInit();</span><br><span class="line">        <span class="keyword">this</span>.collector = collector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextTuple</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                msgList = consumer.poll(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != msgList &amp;&amp; !msgList.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (ConsumerRecord&lt;String, <span class="keyword">byte</span>[]&gt; record : msgList)&#123;</span><br><span class="line">                        <span class="comment">// 原始数据</span></span><br><span class="line">                        <span class="keyword">byte</span>[] value = record.value();</span><br><span class="line">                        <span class="keyword">if</span> (value == <span class="keyword">null</span> || value.length == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">this</span>.collector.emit(<span class="keyword">new</span> Values(value));</span><br><span class="line">                        consumer.commitAsync();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    logger.info(<span class="string">"未拉取到数据..."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                logger.error(<span class="string">"消息队列处理异常:"</span>, e);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">                    logger.error(<span class="string">"暂停失败!"</span>, e1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareOutputFields</span><span class="params">(OutputFieldsDeclarer declarer)</span> </span>&#123;</span><br><span class="line">        declarer.declare(<span class="keyword">new</span> Fields(Constants.FIELD));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化kafka配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">kafkaInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">"bootstrap.servers"</span>, Constants.KAFKA_SERVERS);</span><br><span class="line">        props.put(<span class="string">"max.poll.records"</span>, <span class="number">10</span>);</span><br><span class="line">        props.put(<span class="string">"enable.auto.commit"</span>, <span class="keyword">false</span>);</span><br><span class="line">        props.put(<span class="string">"group.id"</span>, <span class="string">"groupA"</span>);</span><br><span class="line">        props.put(<span class="string">"auto.offset.reset"</span>, <span class="string">"earliest"</span>);</span><br><span class="line">        props.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        props.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.ByteArrayDeserializer"</span>);</span><br><span class="line">        consumer = <span class="keyword">new</span> KafkaConsumer&lt;String, <span class="keyword">byte</span>[]&gt;(props);</span><br><span class="line">        String topic = Constants.TOPIC_NAME;</span><br><span class="line">        <span class="keyword">this</span>.consumer.subscribe(Arrays.asList(topic));</span><br><span class="line">        logger.info(<span class="string">"消息队列["</span> + topic + <span class="string">"] 开始初始化..."</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Bolt"><a href="#Bolt" class="headerlink" title="Bolt"></a>Bolt</h4><p>可以把他看作是消费者，它是专门用来处理数据的。获取到spout下发的数据后，进行解析处理，然后将数据去重在保存到mongo中。</p><ul><li>获取到spout数据。</li><li><p>解析protocol buffer数据，可以参考官网提供的示例。官网：<a href="https://developers.google.com/protocol-buffers/docs/javatutorial" target="_blank" rel="noopener">Java示例</a></p></li><li><p>使用redis进行去重</p></li><li>保存至Mongo</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: DataParseBolt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: </span></span><br><span class="line"><span class="comment"> * 写入数据的bolt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>:1.0.0  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pancm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018年4月19日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataParseBolt</span> <span class="keyword">extends</span> <span class="title">BaseRichBolt</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6542256546124282695L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(DataParseBolt.class);</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(Map map, TopologyContext arg1, OutputCollector collector)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Tuple tuple)</span> </span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[] bytes = tuple.getBinaryByField(Constants.FIELD);</span><br><span class="line"><span class="comment">//业务逻辑处理,这里就简单的打印一下</span></span><br><span class="line">doSomeThing(bytes);</span><br><span class="line"><span class="comment">//logger.info("接收的消息:&#123;&#125;", new String(bytes));</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * cleanup是IBolt接口中定义,用于释放bolt占用的资源。</span></span><br><span class="line"><span class="comment"> * Storm在终止一个bolt之前会调用这个方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareOutputFields</span><span class="params">(OutputFieldsDeclarer arg0)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">(<span class="keyword">byte</span>[] value)</span></span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[] bytes = DataUtil.subByte(value, <span class="number">0</span>, Constants.LEN);</span><br><span class="line"><span class="keyword">int</span> sum = DataUtil.byteArrayToInt(bytes); <span class="comment">// 这一条消息里面有 sum条数据</span></span><br><span class="line"><span class="keyword">int</span> offset = Constants.LEN;  <span class="comment">//byte数组偏移量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sum; i ++)&#123;</span><br><span class="line"><span class="keyword">byte</span>[] dataLenth = DataUtil.subByte(value, offset, Constants.LEN); <span class="comment">// data数据的长度</span></span><br><span class="line"><span class="keyword">int</span> i1 = DataUtil.byteArrayToInt(dataLenth); <span class="comment">// data数据的长度</span></span><br><span class="line">offset += Constants.LEN;</span><br><span class="line"><span class="keyword">byte</span>[] data = DataUtil.subByte(value, offset, i1);</span><br><span class="line">offset += i1;</span><br><span class="line"><span class="comment">// data 转 对象 ， 祝好运</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">SensorLog.SENSOR_LOG sensorLog = SensorLog.SENSOR_LOG.parseFrom(data);</span><br><span class="line">parseResult(sensorLog);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvalidProtocolBufferException e) &#123;</span><br><span class="line">logger.info(<span class="string">"sensorLog对象转换错误：&#123;&#125;"</span>, e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理转换后的结果</span></span><br><span class="line"><span class="comment"> * 然后进行保存</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sensorLog 结果对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseResult</span><span class="params">(SensorLog.SENSOR_LOG sensorLog)</span></span>&#123;</span><br><span class="line">ParseResult parseResult = <span class="keyword">new</span> ParseResult();</span><br><span class="line">SensorLog.WEBLOG skyeyeWeblog = sensorLog.getSkyeyeWeblog();</span><br><span class="line">String uri = UrlUtils.decode(skyeyeWeblog.getUri().toStringUtf8());</span><br><span class="line">String urlPath = <span class="string">"http://"</span> + skyeyeWeblog.getHost()+ uri;</span><br><span class="line">URL url = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">url = <span class="keyword">new</span> URL(urlPath);</span><br><span class="line">&#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">logger.info(<span class="string">"url error: &#123;&#125;"</span>, urlPath);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 过滤规则 （没有问号但又&amp;  || 以？结尾 || host为空 || 状态码不以2和3开头）</span></span><br><span class="line"><span class="keyword">if</span> (uri.indexOf(<span class="string">"?"</span>) == -<span class="number">1</span> &amp;&amp; uri.contains(<span class="string">"&amp;"</span>) || uri.endsWith(<span class="string">"?"</span>)</span><br><span class="line">|| url.getHost() == <span class="keyword">null</span> || <span class="string">""</span>.equals(url.getHost())) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (skyeyeWeblog.getStatus() &lt; <span class="number">200</span> || skyeyeWeblog.getStatus() &gt;= <span class="number">400</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">switch</span> (skyeyeWeblog.getMethod())&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"GET"</span>:</span><br><span class="line">parseResult.setMethod(<span class="string">"GET"</span>);</span><br><span class="line">parseResult.setRawQuery(url.getQuery() == <span class="keyword">null</span> ? <span class="string">""</span> : url.getQuery()); <span class="comment">// uri问号后面就是参数</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"POST"</span>:</span><br><span class="line">parseResult.setMethod(<span class="string">"POST"</span>);</span><br><span class="line">parseResult.setRawQuery(skyeyeWeblog.getData().toStringUtf8());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">parseResult.setHost(url.getProtocol() + <span class="string">"://"</span> + url.getHost());</span><br><span class="line">parseResult.setContentType(skyeyeWeblog.getContentType());</span><br><span class="line">parseResult.setVendorId(skyeyeWeblog.getVendorId());</span><br><span class="line">parseResult.setPath(url.getPath());</span><br><span class="line">parseResult.setStatusCode(skyeyeWeblog.getStatus());</span><br><span class="line">parseResult.setUrl(url.toString());</span><br><span class="line">String filterQueryKey = <span class="string">""</span>;</span><br><span class="line">UrlUtil.UrlEntity parse = UrlUtil.parse(parseResult.getUrl());</span><br><span class="line"><span class="keyword">if</span> (parse.params != <span class="keyword">null</span> &amp;&amp; parse.params.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">filterQueryKey = String.join(<span class="string">"&amp;"</span>, parse.params.keySet());</span><br><span class="line">&#125;</span><br><span class="line">Result result = <span class="keyword">new</span> Result();</span><br><span class="line">result.setTime(<span class="keyword">new</span> Date().getTime());</span><br><span class="line">result.setParseResult(parseResult);</span><br><span class="line">String filterUrl = url.getProtocol() + <span class="string">"://"</span> + url.getHost() + NewPatterns.parsePattern(parseResult.getPath()) + <span class="string">"?"</span> + filterQueryKey;</span><br><span class="line">result.setUniqueUrl(parseResult.getUrl());</span><br><span class="line">result.setRegexPath(filterUrl);</span><br><span class="line">result.setUniqueMd5(MD5Util.MD5(filterUrl));</span><br><span class="line">Jedis jedis = JedisManager.getJedis();</span><br><span class="line"><span class="comment">// 去重 + 保存</span></span><br><span class="line">Boolean bool = jedis.hexists(Constants.RedisConfig.KEY, result.getUniqueMd5());</span><br><span class="line"><span class="keyword">if</span> (!bool)&#123;</span><br><span class="line">jedis.hset(Constants.RedisConfig.KEY, result.getUniqueMd5(), <span class="string">"1"</span>);</span><br><span class="line">MongoManager.insert(result);</span><br><span class="line">&#125;</span><br><span class="line">JedisManager.close(jedis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h4><ol><li>使用storm官方提供的maven插件进行打包。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">      &lt;descriptorRefs&gt;  </span><br><span class="line">        &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;</span><br><span class="line">      &lt;/descriptorRefs&gt;</span><br><span class="line">      &lt;archive&gt;</span><br><span class="line">        &lt;manifest&gt;</span><br><span class="line">          &lt;mainClass&gt;com.path.to.main.Class&lt;/mainClass&gt;</span><br><span class="line">        &lt;/manifest&gt;</span><br><span class="line">      &lt;/archive&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">  &lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>然后运行 mvn assembly:assembly 来获取适当打包的 jar. 确保您 <a href="http://maven.apache.org/plugins/maven-assembly-plugin/examples/single/including-and-excluding-artifacts.html" target="_blank" rel="noopener">排除了</a> Storm jar, 因为群集已经在类路径上有 Storm。</p><ol start="2"><li>排除Storm.jar</li></ol><p><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/07/03/TIM%E6%88%AA%E5%9B%BE20190703114928.png" alt="排除Storm.jar"></p><p>在项目的target目录下找到已经打包好的jar文件。</p><p><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/07/03/TIM%E6%88%AA%E5%9B%BE20190703115340.png" alt="打包的jar"></p><p>插件会自动生成两种jar文件，而我们需要的是包含第三方jar包的jar文件。</p><ol start="3"><li>将文件上传至nimbus服务器上进行部署</li></ol><blockquote><p>scp storm-1.0-SNAPSHOT-jar-with-dependencies.jar <a href="mailto:root@192.168.23.139" target="_blank" rel="noopener">root@192.168.23.139</a>:/home</p></blockquote><ol start="4"><li>将文件移入storm的bin目录下，使用以下命令进行部署运行</li></ol><blockquote><p> ./storm jar jar文件 启动类的路径    topology名称</p></blockquote><blockquote><p>./storm jar storm-1.0-SNAPSHOT-jar-with-dependencies.jar com.weijunzhe.TopologyMain kafka_storm</p></blockquote><p>输出以下内容说明部署成功</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@redis bin]# ./storm jar storm-<span class="number">1</span><span class="variable">.0</span>-SNAPSHOT-jar-<span class="keyword">with</span>-dependencies<span class="variable">.jar</span> com<span class="variable">.weijunzhe</span><span class="variable">.TopologyMain</span> storm-kafka</span><br><span class="line">Running: java -client -Ddaemon<span class="variable">.name</span>= -Dstorm<span class="variable">.options</span>= -Dstorm<span class="variable">.home</span>=/home/storm/apache-storm-<span class="number">1</span><span class="variable">.2</span><span class="variable">.2</span> -Dstorm<span class="variable">.log</span><span class="variable">.dir</span>=/home/storm/apache-storm-<span class="number">1</span><span class="variable">.2</span><span class="variable">.2</span>/logs -Djava<span class="variable">.library</span><span class="variable">.path</span>=/usr/<span class="keyword">local</span>/lib:/opt/<span class="keyword">local</span>/lib:/usr/lib -Dstorm<span class="variable">.conf</span><span class="variable">.file</span>= -cp /home/storm/apache-storm-<span class="number">1</span><span class="variable">.2</span><span class="variable">.2</span><span class="comment">/*:/home/storm/apache-storm-1.2.2/lib/*:/home/storm/apache-storm-1.2.2/extlib/*:storm-1.0-SNAPSHOT-jar-with-dependencies.jar:/home/storm/apache-storm-1.2.2/conf:/home/storm/apache-storm-1.2.2/bin -Dstorm.jar=storm-1.0-SNAPSHOT-jar-with-dependencies.jar -Dstorm.dependency.jars= -Dstorm.dependency.artifacts=&#123;&#125; com.weijunzhe.TopologyMain storm-kafka</span></span><br><span class="line"><span class="comment">427  [main] INFO  c.w.TopologyMain - 运行远程模式</span></span><br><span class="line"><span class="comment">526  [main] WARN  o.a.s.u.Utils - STORM-VERSION new 1.2.2 old null</span></span><br><span class="line"><span class="comment">546  [main] INFO  o.a.s.StormSubmitter - Generated ZooKeeper secret payload for MD5-digest: -9189552336942843022:-6760854273759919878</span></span><br><span class="line"><span class="comment">604  [main] WARN  o.a.s.u.NimbusClient - Using deprecated config nimbus.host for backward compatibility. Please update your storm.yaml so it only has config nimbus.seeds</span></span><br><span class="line"><span class="comment">629  [main] INFO  o.a.s.u.NimbusClient - Found leader nimbus : redis:6627</span></span><br><span class="line"><span class="comment">642  [main] INFO  o.a.s.s.a.AuthUtils - Got AutoCreds []</span></span><br><span class="line"><span class="comment">642  [main] WARN  o.a.s.u.NimbusClient - Using deprecated config nimbus.host for backward compatibility. Please update your storm.yaml so it only has config nimbus.seeds</span></span><br><span class="line"><span class="comment">644  [main] INFO  o.a.s.u.NimbusClient - Found leader nimbus : redis:6627</span></span><br><span class="line"><span class="comment">658  [main] INFO  o.a.s.StormSubmitter - Uploading dependencies - jars...</span></span><br><span class="line"><span class="comment">659  [main] INFO  o.a.s.StormSubmitter - Uploading dependencies - artifacts...</span></span><br><span class="line"><span class="comment">659  [main] INFO  o.a.s.StormSubmitter - Dependency Blob keys - jars : [] / artifacts : []</span></span><br><span class="line"><span class="comment">664  [main] INFO  o.a.s.StormSubmitter - Uploading topology jar storm-1.0-SNAPSHOT-jar-with-dependencies.jar to assigned location: /home/storm/apache-storm-1.2.2/localdir/nimbus/inbox/stormjar-0e80a2ae-e7ab-4b7f-b84c-ef821ac11ab5.jar</span></span><br><span class="line"><span class="comment">856  [main] INFO  o.a.s.StormSubmitter - Successfully uploaded topology jar to assigned location: /home/storm/apache-storm-1.2.2/localdir/nimbus/inbox/stormjar-0e80a2ae-e7ab-4b7f-b84c-ef821ac11ab5.jar</span></span><br><span class="line"><span class="comment">857  [main] WARN  o.a.s.u.Utils - STORM-VERSION new 1.2.2 old 1.2.2</span></span><br><span class="line"><span class="comment">981  [main] INFO  o.a.s.StormSubmitter - Finished submitting topology: storm-kafka</span></span><br></pre></td></tr></table></figure><p>如果出现以下内容，说明没有找到启动类的main方法，请检查启动类的路径是否输入正确。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Running: java -client -Ddaemon<span class="variable">.name</span>= -Dstorm<span class="variable">.options</span>= -Dstorm<span class="variable">.home</span>=/home/storm/apache-storm-<span class="number">1</span><span class="variable">.2</span><span class="variable">.2</span> -Dstorm<span class="variable">.log</span><span class="variable">.dir</span>=/home/storm/apache-storm-<span class="number">1</span><span class="variable">.2</span><span class="variable">.2</span>/logs -Djava<span class="variable">.library</span><span class="variable">.path</span>=/usr/<span class="keyword">local</span>/lib:/opt/<span class="keyword">local</span>/lib:/usr/lib -Dstorm<span class="variable">.conf</span><span class="variable">.file</span>= -cp /home/storm/apache-storm-<span class="number">1</span><span class="variable">.2</span><span class="variable">.2</span><span class="comment">/*:/home/storm/apache-storm-1.2.2/lib/*:/home/storm/apache-storm-1.2.2/extlib/*:storm-1.0-SNAPSHOT-jar-with-dependencies.jar:/home/storm/apache-storm-1.2.2/conf:/home/storm/apache-storm-1.2.2/bin -Dstorm.jar=storm-1.0-SNAPSHOT-jar-with-dependencies.jar -Dstorm.dependency.jars= -Dstorm.dependency.artifacts=&#123;&#125; com.weijunzhe.TopologyMa storm-kafka</span></span><br><span class="line"><span class="comment">Error: Could not find or load main class com.weijunzhe.TopologyMa</span></span><br><span class="line"><span class="comment">You have new mail in /var/spool/mail/root</span></span><br></pre></td></tr></table></figure><p>如果出现<strong>本地模式启动</strong> 则表示你没有输入topology的名称，需要在启动命令后输入topology名称。</p><ol start="5"><li>在storm的web界面中查看topology运行状态</li></ol><p><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/07/03/TIM%E6%88%AA%E5%9B%BE20190703122528.png" alt="topology运行状态"></p>]]></content>
      
      
      <categories>
          
          <category> java开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storm </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Storm集群搭建</title>
      <link href="/2019/06/28/Storm%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/06/28/Storm%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><blockquote><p>版本: Storm 1.2.2</p><p>java: jdk 1.7</p><p>系统：centos7</p><p>zookeeper-3.4.14</p></blockquote><a id="more"></a><p>分别在三台机器上部署</p><blockquote><p>server0 192.168.23.139(Master)</p><p>server1 192.168.23.140(Supervisor)</p><p>server2 192.168.23.141(Supervisor)</p></blockquote><p>安装Storm之前，需要先安装zookeeper,请看我之前的博客 <a href="http://yangweijun.top/2019/06/28/Zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/#more">Zookeeper集群搭建</a></p><h5 id="下载路径"><a href="#下载路径" class="headerlink" title="下载路径"></a>下载路径</h5><p><a href="http://mirror.ox.ac.uk/sites/rsync.apache.org/storm/apache-storm-1.2.2/apache-storm-1.2.2.tar.gz" target="_blank" rel="noopener">apache-storm-1.2.2.tar.gz</a></p><h5 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h5><p>将Storm解压到指定目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-storm-1.2.2.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>修改conf目录中的storm.yaml文件：    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">storm.local.dir: &quot;/usr/local/apache-storm-1.2.2/localdir&quot;</span><br><span class="line">storm.zookeeper.port: 2181</span><br><span class="line">storm.zookeeper.servers:</span><br><span class="line">      - &quot;server0&quot;</span><br><span class="line">      - &quot;server1&quot;</span><br><span class="line">      - &quot;server2&quot;</span><br><span class="line">nimbus.seeds: [&quot;server0&quot;]</span><br><span class="line">ui.host: 0.0.0.0</span><br><span class="line">ui.port: 8088</span><br><span class="line">supervisor.slots.ports:</span><br><span class="line">      - 6700</span><br><span class="line">      - 6701</span><br><span class="line">      - 6702</span><br><span class="line">      - 6703</span><br></pre></td></tr></table></figure><p>在设置参数时，不要使用制表符代替空格。</p><h5 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/apache-storm-1.2.2/localdir</span><br></pre></td></tr></table></figure><h5 id="分发文件"><a href="#分发文件" class="headerlink" title="分发文件"></a>分发文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r apache-storm-1.2.2 root@server1:/usr/local</span><br><span class="line">scp -r apache-storm-1.2.2 root@server2:/usr/local</span><br></pre></td></tr></table></figure><h5 id="启动Storm"><a href="#启动Storm" class="headerlink" title="启动Storm"></a>启动Storm</h5><p>先启动Zookeeper</p><ul><li><p>在server0（Master）上启动nimbus进程</p><p>在Storm的bin目录下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./storm nimbus &amp;</span><br></pre></td></tr></table></figure></li><li><p>在server0（Master）上启动UI进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./storm ui &amp;</span><br></pre></td></tr></table></figure></li><li><p>在所有的supervisor上启动supervisor进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./storm supervisor &amp;</span><br></pre></td></tr></table></figure></li></ul><h5 id="启动web登录查看"><a href="#启动web登录查看" class="headerlink" title="启动web登录查看"></a>启动web登录查看</h5><blockquote><p><a href="http://192.168.23.139:8088" target="_blank" rel="noopener">http://192.168.23.139:8088</a></p></blockquote><p><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/06/28/FireShot%20Capture%20037%20-%20Storm%20UI%20-%20http___192.168.23.139_8088_index.html.png" alt="图片"></p><p>注意：启动时加载很慢，请耐心等待。如果没有启动成功，请查看日志。</p><h5 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h5><ol><li>web不能正常登录</li></ol><p>如果登录web的时候，一直显示loading summary，看不到任何明确的信息。先查看logs目录下的日志，一般是显示超时之类的。这应该是某个进程没有启动成功。对集群中的每个节点使用jps命令查看，看是否有显示config_value，config_value是没有启动成功，对该节点重新启动（不是重启主机，是重启sotrm相关进程）。</p><p>如果登录web的时候，网页进不去，看不到内容（连loading summary都看不到），一直在链接，也没有提示超时之类的，换浏览器也不行，对所有节点全部重启（不是重启主机，是重启sotrm相关进程）。</p><p>如果kill或者kill -9都杀不掉某个进程，我暂时没有找到解决方法，直接重启主机。</p><p>如果登录进去可以看到nimbus或者supervisor等信息，某些信息看不到（一直显示loading summary）。可以换个浏览器试试，用谷歌可以正常显示，用的360就不行，而且360每次都显示loading summary。</p><ol start="2"><li>nimbus或supervisor不能启动</li></ol><p>虽然执行了启动命令但是在命令执行完后进程又退出了。首先查看日志。如果是nimbus不能启动，查看nimbus.log。</p><p>一般会有这样的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-06-26 10:02:30.982 o.a.s.s.o.a.z.ClientCnxn main-SendThread(server0:2181) [INFO] Socket connection established to Desktop/192.168.23.139:2181, initiating session</span><br><span class="line">2019-06-26 10:02:30.986 o.a.s.s.o.a.z.ClientCnxn main-SendThread(server0:2181) [INFO] Unable to read additional data from server sessionid 0x0, likely server has closed socket, closing socket connection and attempting reconnect</span><br><span class="line"></span><br><span class="line">2019-06-26 10:02:31.311 o.a.s.s.o.a.z.ClientCnxn main-SendThread(server0:2181) [INFO] Opening socket connection to server Server1/192.168.23.139:2181. Will not attempt to authenticate using SASL (unknown error)</span><br></pre></td></tr></table></figure><p>这个是zkServer挂掉了。虽然执行jps可以看到QuorumPeerMain还在，但是实际上zkServer已经挂了。</p><p>这个是zkServer存活数只有一半（或小于）配置数引起的。比如zookeeper部署了4台，但是只起了2台，默认zkServer状态就是挂掉了。当再起一台zkServer，即存活数达到3台，超过1半了，就可以查看状态了。也就是说zkServer集群已经运行起来了。</p><p>前面的问题也就解释通了，虽然可以看到zkServer进程，但是因为存活数不足，默认zkServer没有运行起来，所以也就无法启动nimbus或者supervisor了。</p><p> <a href="https://blog.csdn.net/zz657114506/article/details/54429965" target="_blank" rel="noopener">storm集群启动停止脚本</a></p><p>其他参考：</p><p>转载自：<a href="https://blog.csdn.net/qq_15581405/article/details/52811104" target="_blank" rel="noopener">关于storm nimbus &gt; /dev/null 2&gt;&amp;1</a></p><p><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/06/28/20161013225512536.png" alt="nimbus"></p><p>如图所示：<br>bin/storm nimbus会有两个输出，一个标准输出，一个错误输出 </p><p>2&gt;&amp;1的作用是将 2即错误输出 的内容重定向到&amp;1即标准输出中，然后&gt;/dev/null是将两者的结果输入到/dev/null中，相当于抛弃掉。至于最后一个&amp;，因为storm会一直运行，不会自动停掉，页面上就会不停的有内容。&amp;的作用就是将storm拿到后台执行。   </p>]]></content>
      
      
      <categories>
          
          <category> 集群搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka集群搭建</title>
      <link href="/2019/06/28/Kafka%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/06/28/Kafka%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h5 id="Kafka介绍"><a href="#Kafka介绍" class="headerlink" title="Kafka介绍"></a>Kafka介绍</h5><p>Kafka是一种高吞吐量的分布式发布订阅消息系统，有如下特性：</p><ul><li><p>通过O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以TB的消息存储也能够保持长时间的稳定性能。</p></li><li><p>高吞吐量：即使是非常普通的硬件kafka也可以支持每秒数十万的消息。</p></li><li><p>支持通过kafka服务器和消费机集群来分区消息。</p></li><li><p>支持Hadoop并行数据加载。</p><a id="more"></a></li></ul><p>Kafka的目的是提供一个发布订阅解决方案，它可以处理消费者规模的网站中的所有动作流数据。 这种动作（网页浏览，搜索和其他用户的行动）是在现代网络上的许多社会功能的一个关键因素。 这些数据通常是由于吞吐量的要求而通过处理日志和日志聚合来解决。 对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。</p><p>kafka是用Scala编写，用scalac编译器把源文件编译成Java的class文件（即在JVM上运行的字节码），因此Scala是基于JVM的语言，所以使用Kafka需要机器上游JVM支持，本文使用jdk版本为jdk-7u75. </p><p>以3台为例，如果是一个Follower宕机，还有2台服务器提供访问，因为Zookeeper上的数据是有多个副本的，数据并不会丢失，如果是一个Leader宕机，Zookeeper会选举出新的Leader。为什么是奇数台，如果Zookeeper 集群是3台，允许宕机1台，如果是4台，同样是允许1台宕机，因为选举算法要求”超过半数“，所以多出的一台没有意义。</p><h5 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h5><p>Kafka自带了zookeeper，但是一般集群都会有zk，因此使用集群已有的zookeeper。本次不使用Kafka自带的zookeeper。</p><ol><li>下载<a href="http://www.mirrorservice.org/sites/ftp.apache.org/kafka/2.3.0/kafka_2.11-2.3.0.tgz" target="_blank" rel="noopener">kafka_2.11-0.10.0.0.tgz</a></li><li>配置文件 server.properties</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">############################# Server Basics #############################</span><br><span class="line"># 唯一标识一个broker.</span><br><span class="line">broker.id=1</span><br><span class="line">############################# Socket Server Settings #############################</span><br><span class="line">#绑定服务监听的地址和端口，要填写hostname -i 出来的地址，否则可能会绑定到127.0.0.1,producer可能会发不出消息</span><br><span class="line">listeners=PLAINTEXT://192.168.23.139:9092</span><br><span class="line">#broker对producers和consumers服务的地址和端口，如果没有配置，使用listeners的配置，本文没有配置该项</span><br><span class="line">#advertised.listeners=PLAINTEXT://your.host.name:9092</span><br><span class="line"># 处理网络请求的线程数</span><br><span class="line">num.network.threads=3</span><br><span class="line"># 处理磁盘I/O的线程数</span><br><span class="line">num.io.threads=8</span><br><span class="line"># socket server的发送buffer大小 (SO_SNDBUF) </span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line"># socket server的接收buffer大小 (SO_RCVBUF)</span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line">#一个请求的最大size，用来保护防止oom</span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line">############################# Log Basics #############################</span><br><span class="line">#存放日志和消息的目录，可以是用逗号分开的目录，同样不推荐使用/tmp</span><br><span class="line">log.dirs=/usr/local/kafka_2.11-2.3.0/logs</span><br><span class="line">#每个topic默认partitions的数量，数量较大表示消费者可以有更大的并行度。</span><br><span class="line">num.partitions=2</span><br><span class="line"># The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.</span><br><span class="line"># This value is recommended to be increased for installations with data dirs located in RAID array.</span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line">#日志的过期时间，超过后被删除，单位小时</span><br><span class="line">log.retention.hours=168</span><br><span class="line">#一个日志文件最大大小，超过会新建一个文件</span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line">#根据过期策略检查过期文件的时间间隔，单位毫秒</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line">############################# Zookeeper #############################</span><br><span class="line">#Zookeeper的连接配置，用逗号隔开，也可以用192.168.23.139:2181/kakfa这样的方式指定kafka数据在zk中的根目录</span><br><span class="line">zookeeper.connect=192.168.23.139:2181,192.168.23.140:2181,192.168.23.141:2181</span><br><span class="line"># 连接zk的超时时间</span><br><span class="line">zookeeper.connection.timeout.ms=6000</span><br></pre></td></tr></table></figure><p>主要配置文件为server.properties，对于producer和consumer分别有producer.properties和consumer.properties，但是一般不需要单独配置，可以从server.properties中读取。 </p><h5 id="启动各个节点"><a href="#启动各个节点" class="headerlink" title="启动各个节点"></a>启动各个节点</h5><p>启动各节点，分发此配置文件，修改broker.id和listeners地址，建立相应的目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server0 kafka_2.11-2.3.0]# ./bin/kafka-server-start.sh -daemon config/server.properties</span><br><span class="line">[root@server1 kafka_2.11-2.3.0]# ./bin/kafka-server-start.sh -daemon config/server.properties</span><br><span class="line">[root@server2 kafka_2.11-2.3.0]# ./bin/kafka-server-start.sh -daemon config/server.properties</span><br></pre></td></tr></table></figure><p>-daemon放在后台运行。 </p><h5 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h5><ol><li>创建一个topic名为my-test</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server0 kafka_2.11-2.3.0]# bin/kafka-topics.sh --create --zookeeper 172.23.8.144:2181 --replication-factor 3 --partitions 1 --topic my-test</span><br><span class="line">Created topic &quot;my-test&quot;.</span><br></pre></td></tr></table></figure><ol start="2"><li>发送消息，ctrl+c终止</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server0 kafka_2.11-2.3.0]# bin/kafka-console-producer.sh --broker-list 172.23.8.144:9092 --topic my-test</span><br><span class="line">今天是个好日子</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><ol start="3"><li>另一台机器消费</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server0 kafka_2.11-2.3.0]# bin/kafka-console-consumer.sh --zookeeper slave3:2181 --from-beginning --topic my-test</span><br><span class="line">今天是个好日子</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p>继续发送消息则在消费者终端会一直出现新产生的消息。至此,kafka集群搭建成功。 </p><h5 id="Kafka-HelloWorld"><a href="#Kafka-HelloWorld" class="headerlink" title="Kafka HelloWorld"></a>Kafka HelloWorld</h5><p>在kafka的手册中给出了java版的producer和cousumer的代码示例.<br>修改下地址，逗号隔开，该地址是集群的子集，用来探测集群。 </p><ol><li>Producer代码示例</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Properties;</span><br><span class="line">import org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line">public class Producer &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Properties props = new Properties();</span><br><span class="line">        props.put(&quot;bootstrap.servers&quot;,</span><br><span class="line">                &quot;192.168.23.139:9092,192.168.23.140:9092,192.168.23.141:9092&quot;);//该地址是集群的子集，用来探测集群。</span><br><span class="line">        props.put(&quot;acks&quot;, &quot;all&quot;);// 记录完整提交，最慢的但是最大可能的持久化</span><br><span class="line">        props.put(&quot;retries&quot;, 3);// 请求失败重试的次数</span><br><span class="line">        props.put(&quot;batch.size&quot;, 16384);// batch的大小</span><br><span class="line">        props.put(&quot;linger.ms&quot;, 1);// 默认情况即使缓冲区有剩余的空间，也会立即发送请求，设置一段时间用来等待从而将缓冲区填的更多，单位为毫秒，producer发送数据会延迟1ms，可以减少发送到kafka服务器的请求数据</span><br><span class="line">        props.put(&quot;buffer.memory&quot;, 33554432);// 提供给生产者缓冲内存总量</span><br><span class="line">        props.put(&quot;key.serializer&quot;,</span><br><span class="line">                &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);// 序列化的方式，</span><br><span class="line">                                                                            // ByteArraySerializer或者StringSerializer</span><br><span class="line">        props.put(&quot;value.serializer&quot;,</span><br><span class="line">                &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">        KafkaProducer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props);</span><br><span class="line">        for (int i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">            // 三个参数分别为topic, key,value，send()是异步的，添加到缓冲区立即返回，更高效。</span><br><span class="line">            producer.send(new ProducerRecord&lt;String, String&gt;(&quot;my-topic&quot;,</span><br><span class="line">                    Integer.toString(i), Integer.toString(i)));</span><br><span class="line">        &#125;</span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Consumer代码示例</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line">import org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line">public class Consumer &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Properties props = new Properties();</span><br><span class="line">        props.put(&quot;bootstrap.servers&quot;,</span><br><span class="line">                &quot;192.168.23.139:9092,192.168.23.140:9092,192.168.23.141:9092&quot;);// 该地址是集群的子集，用来探测集群。</span><br><span class="line">        props.put(&quot;group.id&quot;, &quot;test&quot;);// cousumer的分组id</span><br><span class="line">        props.put(&quot;enable.auto.commit&quot;, &quot;true&quot;);// 自动提交offsets</span><br><span class="line">        props.put(&quot;auto.commit.interval.ms&quot;, &quot;1000&quot;);// 每隔1s，自动提交offsets</span><br><span class="line">        props.put(&quot;session.timeout.ms&quot;, &quot;30000&quot;);// Consumer向集群发送自己的心跳，超时则认为Consumer已经死了，kafka会把它的分区分配给其他进程</span><br><span class="line">        props.put(&quot;key.deserializer&quot;,</span><br><span class="line">                &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);// 反序列化器</span><br><span class="line">        props.put(&quot;value.deserializer&quot;,</span><br><span class="line">                &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(props);</span><br><span class="line">        consumer.subscribe(Arrays.asList(&quot;my-topic&quot;));// 订阅的topic,可以多个</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(100);</span><br><span class="line">            for (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                System.out.printf(&quot;offset = %d, key = %s, value = %s&quot;,</span><br><span class="line">                        record.offset(), record.key(), record.value());</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>分别运行即可。看到comsumer打印出消息日志。</li></ol><p>以上参考博客：<a href="https://blog.csdn.net/z769184640/article/details/51585419" target="_blank" rel="noopener">https://blog.csdn.net/z769184640/article/details/51585419</a></p>]]></content>
      
      
      <categories>
          
          <category> 集群搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper集群搭建</title>
      <link href="/2019/06/28/Zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/06/28/Zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h5 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h5><blockquote><p>操作系统：Centos7</p><p>java: jdk 1.7+</p><p>版本：3.4.14<br><a id="more"></a></p></blockquote><h5 id="下载路径"><a href="#下载路径" class="headerlink" title="下载路径"></a>下载路径</h5><p><a href="http://apache.mirrors.nublue.co.uk/zookeeper/zookeeper-3.4.14/" target="_blank" rel="noopener">zookeeper-3.4.14</a></p><p>将下载好的tar.gz包放入/home路径下。</p><h5 id="准备服务器"><a href="#准备服务器" class="headerlink" title="准备服务器"></a>准备服务器</h5><blockquote><p>server0 192.168.23.139</p><p>server1 192.168.23.140</p><p>server2 192.168.23.141</p></blockquote><h5 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h5><ol><li>在/home路径下，执行以下命令</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zookeeper-3.4.14.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>进入zookeeper的conf文件夹下，将zoo_sample.cfg配置文件复制为zoo.cfg文件，并使用vim命令修改zoo.cfg配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/zookeeper-3.4.14</span><br><span class="line">cd conf</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">vim zoo.cfg #修改配置文件</span><br></pre></td></tr></table></figure><p><strong>修改如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/usr/local/zookeeper-3.4.14/data</span><br><span class="line">server.0=192.168.23.139:2888:3888</span><br><span class="line">server.1=192.168.23.140:2888:3888</span><br><span class="line">server.2=192.168.23.141:2888:3888</span><br></pre></td></tr></table></figure><p><strong>具体修改如图所示：</strong></p><p><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/06/28/1561522479973.png" alt="1561522479973"></p><h4 id="创建zookeeper标识"><a href="#创建zookeeper标识" class="headerlink" title="创建zookeeper标识"></a>创建zookeeper标识</h4><ol><li>在zookeeper目录下创建data文件夹</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost zookeeper-3.4.14]# ll</span><br><span class="line">total 1676</span><br><span class="line">drwxr-xr-x.  2 2002 2002     223 Jun 25 07:22 bin</span><br><span class="line">-rw-rw-r--.  1 2002 2002   97426 Mar  6 11:50 build.xml</span><br><span class="line">drwxr-xr-x.  2 2002 2002      92 Jun 26 00:18 conf</span><br><span class="line">drwxr-xr-x.  2 2002 2002    4096 Mar  6 12:10 dist-maven</span><br><span class="line">-rw-rw-r--.  1 2002 2002    1709 Mar  6 11:50 ivysettings.xml</span><br><span class="line">-rw-rw-r--.  1 2002 2002   10742 Mar  6 11:50 ivy.xml</span><br><span class="line">drwxr-xr-x.  4 2002 2002    4096 Mar  6 12:09 lib</span><br><span class="line">-rw-rw-r--.  1 2002 2002   11970 Mar  6 11:50 LICENSE.txt</span><br><span class="line">-rw-rw-r--.  1 2002 2002    3132 Mar  6 11:50 NOTICE.txt</span><br><span class="line">-rw-rw-r--.  1 2002 2002   31622 Mar  6 11:50 pom.xml</span><br><span class="line">-rw-rw-r--.  1 2002 2002    1765 Mar  6 11:50 README.md</span><br><span class="line">-rw-rw-r--.  1 2002 2002    1770 Mar  6 11:50 README_packaging.txt</span><br><span class="line">drwxr-xr-x.  3 2002 2002      22 Mar  6 11:50 src</span><br><span class="line">-rw-rw-r--.  1 2002 2002 1515359 Mar  6 11:50 zookeeper-3.4.14.jar</span><br><span class="line">-rw-rw-r--.  1 2002 2002     836 Mar  6 12:10 zookeeper-3.4.14.jar.asc</span><br><span class="line">-rw-rw-r--.  1 2002 2002      33 Mar  6 11:50 zookeeper-3.4.14.jar.md5</span><br><span class="line">-rw-rw-r--.  1 2002 2002      41 Mar  6 11:50 zookeeper-3.4.14.jar.sha1</span><br><span class="line">drwxr-xr-x.  3 2002 2002      47 Mar  6 12:09 zookeeper-client</span><br><span class="line">drwxr-xr-x. 12 2002 2002    4096 Mar  6 12:09 zookeeper-contrib</span><br><span class="line">drwxr-xr-x.  7 2002 2002    4096 Mar  6 12:09 zookeeper-docs</span><br><span class="line">drwxr-xr-x.  3 2002 2002      35 Mar  6 12:09 zookeeper-it</span><br><span class="line">drwxr-xr-x.  4 2002 2002      46 Mar  6 12:09 zookeeper-jute</span><br><span class="line">drwxr-xr-x.  5 2002 2002     176 Mar  6 12:09 zookeeper-recipes</span><br><span class="line">drwxr-xr-x.  3 2002 2002      32 Mar  6 12:09 zookeeper-server</span><br><span class="line"></span><br><span class="line">$ mkdir data</span><br></pre></td></tr></table></figure><p><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/06/28/1561522787591.png" alt="1561522787591"></p><ol start="2"><li>进入data目录下创建myid文件,并在myid文件里添加一个标识数字1，每台服务器可以使用自增标识。比如：192.168.23.139使用数字1， 192.168.23.140使用数字2，192.168.23.141使用数字3.以此类推</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd data</span><br><span class="line">vim myid</span><br></pre></td></tr></table></figure><h5 id="将zookeeper文件夹拷贝到其他服务器"><a href="#将zookeeper文件夹拷贝到其他服务器" class="headerlink" title="将zookeeper文件夹拷贝到其他服务器"></a>将zookeeper文件夹拷贝到其他服务器</h5><ol><li>是用scp拷贝到其他服务器，使用-r表示递归拷贝</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r  zookeeper-3.4.14/ root@192.168.23.140:/usr/local/</span><br><span class="line">scp -r  zookeeper-3.4.14/ root@192.168.23.141:/usr/local/</span><br></pre></td></tr></table></figure><ol start="2"><li>修改其他服务器上的myid文件</li></ol><h5 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h5><ol><li>在每台服务器上执行以下命令</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zkServer.sh start</span><br></pre></td></tr></table></figure><h5 id="检查是否启动成功"><a href="#检查是否启动成功" class="headerlink" title="检查是否启动成功"></a>检查是否启动成功</h5><p>Zookeeper全部启动后查看Zookeeper状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 zookeeper-3.4.14]# bin/zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/zookeeper-3.4.14/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure><h5 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h5><p>如果没有启动请查看防火墙是否关闭</p><p>CentOS 7.0默认使用的是firewall作为防火墙</p><h6 id="停止firewall"><a href="#停止firewall" class="headerlink" title="停止firewall"></a>停止firewall</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><h6 id="禁止firewall开机启动"><a href="#禁止firewall开机启动" class="headerlink" title="禁止firewall开机启动"></a>禁止firewall开机启动</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 集群搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建Spring Cloud项目</title>
      <link href="/2019/05/03/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BASpring-Cloud%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/05/03/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BASpring-Cloud%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Spring-Cloud"><a href="#什么是Spring-Cloud" class="headerlink" title="什么是Spring Cloud"></a>什么是Spring Cloud</h3><p>Spring Cloud是一个分布式的整体解决方案。Spring Cloud 为开发者提供了在分布式系统（配置管理，服务发现，熔断，路由，微代理，控制总线，一次性token，全局琐，leader选举，分布式session，集群状态）中快速构建的工具，使用Spring Cloud的开发者可以快速的启动服务或构建应用、同时能够快速和云平台资源进行对接。<br><a id="more"></a><br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/05/03/SpringCloud%E8%B0%83%E7%94%A8%E5%9B%BE.jpg" alt="spring cloud调用图"></p><h4 id="SpringCloud分布式开发五大常用组件"><a href="#SpringCloud分布式开发五大常用组件" class="headerlink" title="SpringCloud分布式开发五大常用组件"></a>SpringCloud分布式开发五大常用组件</h4><ul><li>服务发现——Netflix Eureka </li><li>客服端负载均衡——Netflix Ribbon </li><li>断路器——Netflix Hystrix </li><li>服务网关——Netflix Zuul </li><li>分布式配置——Spring Cloud Config</li></ul><p><strong>测试如下</strong>：建立一个pom工程，工程中创建三个Module：eureka-server，eureka-consumer和provider-server。</p><h3 id="建立pom工程"><a href="#建立pom工程" class="headerlink" title="建立pom工程"></a>建立pom工程</h3><ol><li>使用idea的工具栏 file -&gt; new -&gt; project 使用maven 创建pom工程。<br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/05/03/%E5%88%9B%E5%BB%BAmaven1.png" alt="创建maven1"><br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/05/03/%E5%88%9B%E5%BB%BAmaven2.png" alt="创建maven2"><br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/05/03/%E5%88%9B%E5%BB%BAmaven3.png" alt="创建maven3"></li></ol><ol start="2"><li>将项目pom.xml里的packaging标签内容改成pom，使项目变成聚合工程。Spring boot版本最好是<strong>1.5.10.RELEASE</strong>，否则可能会出现不必要的报错。<br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/05/03/%E6%94%B9%E6%88%90pom.png" alt="改成pom工程"></li></ol><h4 id="建立eureka-server注册中心"><a href="#建立eureka-server注册中心" class="headerlink" title="建立eureka-server注册中心"></a>建立eureka-server注册中心</h4><ol><li><p>在pom工程中创建一个Spring boot模块,名称为eureka-server<br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/05/03/%E5%88%9B%E5%BB%BAspringboot%E6%A8%A1%E5%9D%971.png" alt=""><br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/05/03/%E5%88%9B%E5%BB%BA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.png" alt=""><br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/05/03/%E5%88%9B%E5%BB%BA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%832.png" alt=""><br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/05/03/%E5%88%9B%E5%BB%BA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%833.png" alt=""></p></li><li><p>继承父类的pom，eureka-server的pom文件修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.weijunzhe&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.weijunzhe&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;eureka-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;eureka-server&lt;/name&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line">    &lt;description&gt;Spring cloud 注册中心&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Edgware.SR2&lt;/spring-cloud.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;spring-milestones&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Spring Milestones&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></li><li><p>application.yml修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-server     # eureka实例的主机名</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true</span><br><span class="line">  client:</span><br><span class="line">    fetch-registry: false   #不把自己注册到eureka上</span><br><span class="line">    register-with-eureka: false #不从eureka上来获取服务的注册信息--不检索服务</span><br><span class="line">  server:</span><br><span class="line">    wait-time-in-ms-when-sync-empty: 0</span><br><span class="line">security:</span><br><span class="line">  basic:</span><br><span class="line">    enabled: true   # 启用用户名和密码保护服务</span><br><span class="line">  user:     # 注册服务使用的用户名和密码</span><br><span class="line">    name: admin</span><br><span class="line">    password: admin</span><br></pre></td></tr></table></figure></li><li><p>启动类加上EnableEurekaServer注解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.weijunzhe;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line">@EnableEurekaServer</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class EurekaServerApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动注册中心项目，浏览器访问<a href="http://localhost:8761" target="_blank" rel="noopener">http://localhost:8761</a>：<br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/05/03/%E5%90%AF%E5%8A%A8%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.png" alt=""></p></li></ol><p>此时注册中心中还没有任何服务实例！</p><h4 id="创建服务提供者并进行注册"><a href="#创建服务提供者并进行注册" class="headerlink" title="创建服务提供者并进行注册"></a>创建服务提供者并进行注册</h4><ol><li>在pom工程中创建一个Springboot模块,名称为produce-server</li><li><p>继承父类的pom，produce-server的pom文件修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.weijunzhe&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.weijunzhe&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;produce-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;produce-server&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Springcloud服务发布端&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Edgware.SR2&lt;/spring-cloud.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">            &lt;!--这里表明为客户端--&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></li><li><p>application.yml修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8001</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: produce-server</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    registerWithEureka: true</span><br><span class="line">    fetchRegistry: true</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://admin:admin@localhost:8761/eureka/</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true # 注册服务的时候使用服务的ip地址</span><br></pre></td></tr></table></figure></li></ol><p>4.主程序类如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.weijunzhe;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class ProduceServerApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ProduceServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="5"><li>发布服务如下：</li></ol><ul><li><p>service如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.weijunzhe.test.service.impl;</span><br><span class="line"></span><br><span class="line">import com.weijunzhe.test.service.TestService;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class TestServiceImpl implements TestService &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String test(String username) &#123;</span><br><span class="line">        System.out.println(&quot;欢迎您，&quot; + username);</span><br><span class="line">        return &quot;欢迎您，&quot; + username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>controller如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.weijunzhe.test.controller;</span><br><span class="line"></span><br><span class="line">import com.weijunzhe.test.service.TestService;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    TestService testService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/test&quot;)</span><br><span class="line">    public String test(String username)&#123;</span><br><span class="line">        return testService.test(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li>启动服务提供者，然后查看浏览器注册中心页面：<br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/05/03/%E5%90%AF%E5%8A%A8%E5%8F%91%E5%B8%83%E6%9C%8D%E5%8A%A1%E5%90%8E%E7%9A%84%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83_LI.jpg" alt=""></li></ol><p>此时注册中心中就有了服务提供者的一个实例！</p><p>浏览器测试服务提供者如下：<br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/05/03/%E6%B5%8B%E8%AF%95%E6%9C%8D%E5%8A%A1%E5%8F%91%E5%B8%83%E4%BB%A3%E7%A0%81.png" alt=""></p><h4 id="创建服务消费者并注册和发现服务"><a href="#创建服务消费者并注册和发现服务" class="headerlink" title="创建服务消费者并注册和发现服务"></a>创建服务消费者并注册和发现服务</h4><ol><li><p>在pom工程中创建一个Springboot模块,名称为eureka-server<br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/05/03/%E5%88%9B%E5%BB%BAspringboot%E6%A8%A1%E5%9D%971.png" alt=""><br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/05/03/%E5%88%9B%E5%BB%BA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.png" alt=""><br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/05/03/%E5%88%9B%E5%BB%BA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%832.png" alt=""><br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/05/03/%E5%88%9B%E5%BB%BA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%833.png" alt=""></p></li><li><p>继承父类的pom，eureka-server的pom文件修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.weijunzhe&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.weijunzhe&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;eureka-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;eureka-server&lt;/name&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line">    &lt;description&gt;Spring cloud 注册中心&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Edgware.SR2&lt;/spring-cloud.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;spring-milestones&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Spring Milestones&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></li><li><p>application.yml修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-server     # eureka实例的主机名</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true</span><br><span class="line">  client:</span><br><span class="line">    fetch-registry: false   #不把自己注册到eureka上</span><br><span class="line">    register-with-eureka: false #不从eureka上来获取服务的注册信息--不检索服务</span><br><span class="line">  server:</span><br><span class="line">    wait-time-in-ms-when-sync-empty: 0</span><br><span class="line">security:</span><br><span class="line">  basic:</span><br><span class="line">    enabled: true   # 启用用户名和密码保护服务</span><br><span class="line">  user:     # 注册服务使用的用户名和密码</span><br><span class="line">    name: admin</span><br><span class="line">    password: admin</span><br></pre></td></tr></table></figure></li><li><p>启动类加上EnableEurekaServer注解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.weijunzhe;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line">@EnableEurekaServer</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class EurekaServerApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动注册中心项目，浏览器访问<a href="http://localhost:8761/：" target="_blank" rel="noopener">http://localhost:8761/：</a><br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/05/03/%E5%90%AF%E5%8A%A8%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.png" alt=""></p></li></ol><p>此时注册中心中还没有任何服务实例！</p><h4 id="创建服务提供者并进行注册-1"><a href="#创建服务提供者并进行注册-1" class="headerlink" title="创建服务提供者并进行注册"></a>创建服务提供者并进行注册</h4><ol><li>在pom工程中创建一个Springboot模块,名称为eureka-consumer</li><li><p>继承父类的pom，eureka-consumer的pom文件修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.weijunzhe&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.weijunzhe&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;eureka-consumer&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;eureka-consumer&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Spring Cloud 消费端&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Edgware.SR2&lt;/spring-cloud.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></li><li><p>application.yml修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: consumer-user</span><br><span class="line">server:</span><br><span class="line">  port: 8200</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true # 注册服务的时候使用服务的ip地址</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://admin:admin@localhost:8761/eureka/</span><br></pre></td></tr></table></figure></li></ol><p>4.主程序类如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.weijunzhe;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient //开启发现服务功能</span><br><span class="line">public class EurekaConsumerApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(EurekaConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @LoadBalanced //开启负载均衡机制</span><br><span class="line">    @Bean</span><br><span class="line">    public RestTemplate restTemplate()&#123;</span><br><span class="line">        return new RestTemplate();</span><br><span class="line">        // 用来发送http请求</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="5"><li>发布服务如下：</li></ol><ul><li>controller如下：<br>这里需要注意手动往容器中注册了RestTemplate，其提供了多种便捷访问远程Http服务的方法，是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问REST服务的客户端模板工具类。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.weijunzhe.test.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/test&quot;)</span><br><span class="line">    public String test(String username)&#123;</span><br><span class="line">        String msg = restTemplate.getForObject(&quot;http://produce-server/test?username=&quot; + username, String.class);</span><br><span class="line">        return msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li>将服务消费者项目启动，查看浏览器注册中心：<br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/05/03/%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9%E8%80%85%E5%90%8E%E7%9A%84%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.png" alt=""></li></ol><p>访问服务消费者的方法(<a href="http://localhost:8200/test?username=admin2)：" target="_blank" rel="noopener">http://localhost:8200/test?username=admin2)：</a><br><img src="https://weijunzhe.oss-cn-beijing.aliyuncs.com/blog/2019/05/03/%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9%E8%80%85%E9%A1%B5%E9%9D%A2.png" alt=""></p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://blog.csdn.net/j080624/article/details/81004207" target="_blank" rel="noopener">https://blog.csdn.net/j080624/article/details/81004207</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map如何实现线程安全</title>
      <link href="/2019/01/29/Map%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
      <url>/2019/01/29/Map%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>Java 提供了不同层面的线程安全支持。在传统集合框架内部，除了 Hashtable 等同步容器，还提供了所谓的同步包装器（Synchronized Wrapper），我们可以调用Collections 工具类提供的包装方法，来获取一个同步的包装容器（如 Collections.synchronizedMap），但是它们都是利用非常粗粒度的同步方式，在高并发情况下，性能比较低下。<br><a id="more"></a><br>另外，更加普遍的选择是利用并发包提供的线程安全容器类，它提供了：</p><ul><li>各种并发容器，比如 ConcurrentHashMap、CopyOnWriteArrayList。</li><li>各种线程安全队列（Queue/Deque），如 ArrayBlockingQueue、SynchronousQueue。</li><li>各种有序容器的线程安全版本等。</li></ul><p>具体保证线程安全的方式，包括有从简单的 synchronize 方式，到基于更加精确细化的，比如基于分离锁实现的 ConcurrentHashMap 等并发实现等。具体选择要看开发的场景需求，总体来说，并发包内提供的容器通用场景，远优于早期的简单同步实现。</p><p>为什么需要 ConcurrentHashMap？</p><p>Hashtable 本身比较低效，因为它的实现基本就是将 put、get、size 等各种方法加上 “synchronized”。简单来说，这就导致了所有并发操作都要竞争同一把锁，一个线程在进行同步操作时，其他线程只能等待，大大降低了并发操作的效率。</p><p>前面已经提过 HashMap 不是线程安全的，并发情况会导致类似 CPU 占用 100%等一些问题，那么能不能利用 Collections 提供的同步包装器来解决问题呢？</p><p>看看下面的代码片段，我们发现同步包装器只是利用输入 Map 构造了另一个同步版本，所有操作虽然不再声明成为 synchronized 方法，但是还是利用了 “this” 作为互斥的 mutex，没有真正意义上的改进！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private static class SynchronizedMap&lt;K,V&gt;</span><br><span class="line">    implements Map&lt;K,V&gt;, Serializable &#123;</span><br><span class="line">    private final Map&lt;K,V&gt; m;     // Backing Map</span><br><span class="line">    final Object      mutex;        // Object on which to synchronize</span><br><span class="line">    // …</span><br><span class="line">    public int size() &#123;</span><br><span class="line">        synchronized (mutex) &#123;return m.size();&#125;</span><br><span class="line">    &#125;</span><br><span class="line"> // … </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，Hashtable 或者同步包装版本，都只是适合在非高并发的场景下。</p><p>以上就是今天的总结。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对比Hashtable、HashMap和TreeMap的区别</title>
      <link href="/2019/01/28/%E5%AF%B9%E6%AF%94Hashtable%E3%80%81HashMap%E5%92%8CTreeMap%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/01/28/%E5%AF%B9%E6%AF%94Hashtable%E3%80%81HashMap%E5%92%8CTreeMap%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>Map 是广义 Java 的集合框架中的另一部分，HashMap 作为框架中使用频率最高的类型之一，它本身以及相关类型自然也是面试考察的热点。<br><a id="more"></a></p><p>Hashtable、HashMap、TreeMap 都是最常见的一些 Map 实现，是以<strong>键值对</strong>的形式存储和操作数据的容器类型。</p><p>Hashtable 是早期 Java 类库提供的一个哈希表实现，本身是同步的，不支持 null 键和值，由于同步导致的性能开销，所以已经很少被推荐使用。</p><p>HashMap 是应用更加广泛的哈希表实现，行为上大致与 HashTable 一致，只要区别在于 HashMap 不是同步的，支持 null 键和值等。通常情况下，HashMap 进行 put 或者 get 操作，可以达到常数时间的性能，所以<strong>它是绝大部分利用键值对存储场景的首选</strong>，比如，实现一个用户 ID 和用户信息对应的运行时存储结构。</p><p>TreeMap 则是基于红黑树的一种提供顺序访问的 Map，和 HashMap 不同，它的 get、put、remove 之类操作都是O（log（n））的时间复杂度，具体顺序可以指定 Comparator 来决定，或者根据键的自然顺序来判断。</p><h5 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h5><p>首先，我们先对 Map 相关类型有个整体了解，Map 虽然通常被包括在 Java 集合框架里，但是其本身并不是狭义上的集合类型（Collection），具体可以参考下面这个简单类图。<br><img src="https://static001.geekbang.org/resource/image/26/7c/266cfaab2573c9777b1157816784727c.png" alt="map类图"></p><p>Hashtable 比较特别，作为类似 Vector、Stack 的早期集合相关类型，它是扩展了Dictionary 类的，类结构上与 HashMap 之类明显不同。</p><p>HashMap 等其他 Map 实现则是都扩展了 AbstractMap，里面包含了通用方法抽象。不同Map 的用途，从类图结构就能体现出来，设计目的已经体现在不同的接口上。</p><p>大部分使用 Map 的场景，通常就是放入、访问或者删除，而对顺序没有特别要求，HashMap 在这种情况下基本是最好的选择。<strong>HashMap 的性能表现非常依赖于哈希码的有效性，请务必掌握 hashCode 和 equals 的一些基本约定</strong>，比如：</p><ul><li>equals 相等，hashCode 一定要相等。</li><li>重写了 hashCode 也要重写 equals。</li><li>ha’shCode 需要保持一致性，状态改变返回的哈希值仍然要一致。</li><li>equals 的对称、反射、传递等特性。</li></ul><p>以上就是今天的总结。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对比Vector、ArrayList、LinkedList的区别</title>
      <link href="/2019/01/25/%E5%AF%B9%E6%AF%94Vector%E3%80%81ArrayList%E3%80%81LinkedList%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/01/25/%E5%AF%B9%E6%AF%94Vector%E3%80%81ArrayList%E3%80%81LinkedList%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>我们在日常的工作中，能够高效地管理和操作数据是非常重要的。由于每个编程语言支持的数据结构不尽相同，比如 C 语言，需要自己实现很多基础数据结构，管理和操作会比较麻烦。相比之下，Java 则要方便的多，针对通用场景的需求，Java 提供了强大的集合框架，大大提高了开发者的生产力。<br><a id="more"></a><br>Verctor、ArrayList、LinkedList都是集合框架中的 List，也就是所谓的有序集合，因此具体功能也比较相近，比如都提供按照位置进行定位、添加或者删除的操作，都提供迭代器以遍历其内容等。但因为具体的设计区别，在行为、性能、线程安全等方面，表现又有很大不同。</p><p>Vector 是 Java 早期提供的<strong>线程安全的动态数组</strong>，如果不需要线程安全，并不建议选择，毕竟同步时有额外开销的。Vector 内部是使用对象数组来保存，可以根据需要自动增加容量，当数组已满时，会创建新的数组，并拷贝原有数组数据。</p><p>ArrayList 是应用更加广泛的<strong>动态数组</strong>实现，它本身不是线程安全的，所以性能要好很多。与 Vector 近似，ArrayList 也是可以根据需要调整容量，不过两者的调整逻辑有所区别，Vector 在扩容时会提高 1 倍，而 ArrayList 则是增加 50%。</p><p>LinkedList 顾名思义是 Java 提供的<strong>双向链表</strong>，所以它不需要像上面两种那样调整容量，它也不是线程安全的。</p><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ul><li>Vector 和 ArrayList 作为动态数组，其内部元素以数组形式顺序存储的，所以非常适合随机访问的场合。除了尾部插入和删除元素，往往性能会相对较差，比如我们在中间位置插入一个元素，需要移动后续所有元素。</li><li>而 LinkedList 进行节点插入、删除却要高效得多，但是随机访问性能则要比动态数组慢。</li></ul><p>所以，在应用开发中，如果事先可以估计到，应用操作是偏向于插入、删除，还是随机访问较多，就可以针对性的进行选择。</p><h5 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h5><p>为了有个直观的印象，下面展示一张简要的类图。注意，为了避免混淆，这里并没有把 java.util.concurrent 下面的线程安全容器添加进来；也没有列出 Map 容器，虽然通常概念上我们也会把 Map 作为集合框架的一部分，但是它本身并不是真正的集合（Collection）。</p><p><img src="https://static001.geekbang.org/resource/image/67/c7/675536edf1563b11ab7ead0def1215c7.png" alt="简单的类图"></p><p>我们可以看到 Java 的集合框架，Collection 接口是所有集合的根，然后扩展开提供了三大类集合，分别是：</p><ul><li>List，也就是之前介绍最多的有序集合，它提供了方便的访问、插入、删除等操作。</li><li>Set，Set 是不允许重复元素的，这是和 List 最明显的区别，也就是不存在两个对象 equals 返回 true。我们日常开发中有很多需要保证元素唯一性的场合。</li><li>Queue/Deque，则是 Java 提供的标准队列结构的实现，除了集合的基本功能，他还支持类似先进先出（FIFO，First-In-First-Out）或者后进先出（LIFO，Last-In-First-Out）等特定行为。这里不包括 BlockingQueue，因为通常是并发编程场合，所以被放置在并发包里。</li></ul><p>每种集合的通用逻辑，都被抽象到相应的抽象类之中，比如 AbStractList 就集中了各种 List 操作的通用部分。这些集合不是完全孤立的，比如，LinkedList 本身，既是 List，也是 Deque。</p><p>如果阅读过更多源码，你会发现，其实，TreeSet 代码里实际默认是利用 TreeMap 实现的，Java 类库创建了一个 Dummy 对象“PRIESENT” 作为 value，然后所有插入的元素其实是以键的形式放入了 TreeMap 里面；同理，HashSet 其实也是以 HashMap 为基础实现的，原来他们只是 Map 类的马甲！</p><p>就像前面提到过的，我们需要对各种具体集合实现，至少了解基本特征和经典使用场景，以 Set 的几个实现为例：</p><ul><li>TreeSet 支持自然顺序访问，但是添加、删除、包含等操作要相对低效（时间）。</li><li>HashSet 则是利用哈希算法，理想情况下，如果哈希散列正常，可以提供常数时间的添加、删除、包含等操作，但是它不保证有序。</li><li>LinkedHashSet，内部构建了一个记录插入顺序的双向链表，因此提供了按照插入顺序遍历的能力，与此同时，也保证了常数时间的添加、删除、包含等操作，这些操作性能略低于 HashSet，因为需要维护链表的开销。</li><li>在遍历元素时，HashSet 性能受到自身容量影响，所以初始化时，除非有必要，不然不要将其背后的 HashMap 容量设置过大。而对于 LinkedHashSet，由于其内部链表提供的方便，遍历性能只和元素多少有关系。</li></ul><p>以上就是今天的总结。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>int和Integer有什么区别</title>
      <link href="/2019/01/24/int%E5%92%8CInteger%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/01/24/int%E5%92%8CInteger%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>java虽然号称是面向对象的语言，但是原始数据类型仍然是重要的组成元素，所以在面试中，经常考察原始数据类型和包装类等Java语言特性。<br><a id="more"></a><br>int 是我们常说的整形数字，是 Java 的8个原始数据类型（Primitive Types，boolean、byte、short、int、float、double、long）之一。<strong>Java语言虽然号称一切都是对象，但是原始类型是例外</strong>。</p><p>Integer 是 int 对应的包装类，他有一个 int 类型的字段存储数据，并且提供了基本操作，比如数学运算、int和字符串之间转换等。在Java 5 中，引入了自动装箱和自动拆箱功能（boxing/unboxing），Java 可以根据上下文，自动进行转换，极大地简化了相关编程。</p><p>关于 Integer 的值缓存，这涉及 Java 5 中另一个改进。构建 Integer 对象的传统方式是直接调用构造器，直接 new 一个对象。但是根据实践，我们发现大部分数据操作都是集中在有限的、较小的数值范围，因而，在 Java 5 中新增了静态工厂方法 valueOf，在调用他的时候会利用一个缓存机制，带来了明显的性能改进。按照 Javadoc，<strong>这个值默认缓存是 -128 到 127 之间</strong>。</p><h6 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h6><h6 id="理解自动装箱、拆箱"><a href="#理解自动装箱、拆箱" class="headerlink" title="理解自动装箱、拆箱"></a>理解自动装箱、拆箱</h6><p>自动装箱实际上算是一种<strong>语法糖</strong>。什么是语法糖？可以简单理解为 Java 平台为我们自动进行了一些转换，保证不同的写法在运行时等价，他们发生在编译阶段，也就是生成的字节码是一致的。</p><p>像前面提到的整数，javac 替我们自动把装箱转换为 Integer.valueOf()，把拆箱替换为 Integer.intValue()，这似乎也顺道回答了另一个问题，既然调用的是 Integer.valueOf()，自然能够得到缓存的好处啊。</p><p>如何程序化的验证上面的结论呢？</p><p>你可以写一段简单的程序包含下面两句代码，然后反编译一下。当然，这是一种从表现倒推的方法，大多数情况下，我们还是直接参考规范文档会更加可靠，毕竟软件承诺的是遵循规范，而不是保持当前行为。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer integer = 1;</span><br><span class="line">int unboxing = integer ++;</span><br></pre></td></tr></table></figure></p><p>反编译输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1: invokestatic  #2                  // Method</span><br><span class="line">java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br><span class="line">8: invokevirtual #3                  // Method</span><br><span class="line">java/lang/Integer.intValue:()I</span><br></pre></td></tr></table></figure></p><p>这种缓存机制并不是只有 Integer 才有，同样存在于其他的一些包装类，比如：</p><ul><li>Boolean，缓存了 true/false 对应实例，确切说，只会返回两个常量实例 Boolean.TRUE/FALSE。</li><li>Short，同样是缓存了 -128 到 127 之间的数值。</li><li>Byte，数值有限，所以全部都被缓存。</li><li>Character，缓存范围‘\u0000’ 到 ‘\u007F’。<br>自动装箱/自动拆箱似乎很酷，在编程实践中，有什么需要注意的吗？</li></ul><p>原则上，<strong>建议避免无意中的装箱、拆箱行为</strong>，尤其是在性能敏感的场合，创建 10 万个 Java 对象和 10 万个整数的开销可不是一个数量级的，不管是内存使用还是处理速度，光是对象头的空间占用就已经是数量级的差距了。</p><p>以上就是今天的总结。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射机制与动态代理</title>
      <link href="/2019/01/23/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/2019/01/23/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h5 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h5><p>反射机制是 Java 语言提供的一种基础功能，赋予程序在运行时<strong>自省</strong>（introspect，官方用语）的能力。通过反射我们可以直接操作类或者对象，比如获取某个对象的类定义，获取类声明的属性和方法，调用方法或者构造对象，甚至可以运行时修改类定义。<br><a id="more"></a></p><h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><p>动态代理是一种方便运行动态构建代理、动态处理代理调用的机制，很多场景都是利用类似机制做到的，比如用来包装RPC调用、面向切面的编程（AOP）。</p><p>实现动态代理的方式很多，比如 JDK 自身提供的动态代理，就是主要利用了上面提到的反射机制。还有其他的实现方式，比如利用传说中更高性能的字节码操作机制，类似 ASM、cglib（基于ASM）、javassist等。</p><p>首先，他是一个<strong>代理机制</strong>。如果熟悉设计模式中的代理模式，我们就会知道，代理可以看作对调用目标的一个包装，这样我们对目标代码的调用不是直接发生的，而是通过代理完成的。其实很多动态代理场景，我认为也可以看作是装饰器（Decorator）模式的应用。</p><p>通过代理可以然调用者与实现者之间<strong>解耦</strong>。比如进行RPC调用，框架内部的寻址、序列化、反序列化等，对于调用者往往是没有太大意义的，通过代理，可以提供更加友善的界面。</p><p>代理的发展经历了静态到动态的过程，源于静态代理引入的额外工作。类似早期的 RMI 之类古董技术，还需要 rmic 之类工具生成静态 stub 等各种文件，增加了很多繁琐的准备工作，而这又和我们的业务逻辑没有关系。利用动态代理机制，相应的 stub 等类，可以在运行时生成，对应的调用操作也是动态完成，极大地提高了我们的生产力。改进后的 RMI 已经不再需要手动去准备这些了，虽然它仍然时相对古老落后的技术，未来也许会逐步被移除。</p><h5 id="代理的方式"><a href="#代理的方式" class="headerlink" title="代理的方式"></a>代理的方式</h5><h6 id="JDK-动态代理"><a href="#JDK-动态代理" class="headerlink" title="JDK 动态代理"></a>JDK 动态代理</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class MyDynamicProxy &#123;</span><br><span class="line">    public static  void main (String[] args) &#123;</span><br><span class="line">        HelloImpl hello = new HelloImpl();</span><br><span class="line">        MyInvocationHandler handler = new MyInvocationHandler(hello);</span><br><span class="line">        // 构造代码实例</span><br><span class="line">        Hello proxyHello = (Hello) Proxy.newProxyInstance(HelloImpl.class.getClassLoader(), HelloImpl.class.getInterfaces(), handler);</span><br><span class="line">        // 调用代理方法</span><br><span class="line">        proxyHello.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">interface Hello &#123;</span><br><span class="line">    void sayHello();</span><br><span class="line">&#125;</span><br><span class="line">class HelloImpl implements  Hello &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void sayHello() &#123;</span><br><span class="line">        System.out.println(&quot;Hello World&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> class MyInvocationHandler implements InvocationHandler &#123;</span><br><span class="line">    private Object target;</span><br><span class="line">    public MyInvocationHandler(Object target) &#123;</span><br><span class="line">        this.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args)</span><br><span class="line">            throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;Invoking sayHello&quot;);</span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的JDK Proxy 例子，非常简单地实现了动态代理的构建和代理操作。首先，实现对应的 InvocationHandler；然后，以接口 Hello 为纽带， 为被调用目标构建代理对象，进而应用程序就可以使用代理对象间接运行调用目标的逻辑，代理为应用插入额外逻辑（这里时println）提供了便利的入口。</p><h6 id="cglib动态代理"><a href="#cglib动态代理" class="headerlink" title="cglib动态代理"></a>cglib动态代理</h6><p>cglib 动态代理采用的是创建目标类的子类的方式，因为是子类化，我们可以达到近似使用被调用者本身的效果。在Spring 编程中，框架通常会处理这种情况，当然我们也可以显式指定。</p><p>JDK Proxy 的优势：</p><ul><li>最小化依赖关系，减少依赖意味着简化开发和维护，JDK 本身的支持，可能比 cglib 更加可靠。</li><li>平滑进行 JDK 版本升级，而字节码类库通常需求进行更新以保证在新版 Java 上能够使用。</li><li>代码实现简单。</li></ul><p>基于类似cglib 框架的优势</p><ul><li>有的时候调用目标可能不便实现额外接口，从某种角度看，限定调用者实现接口是有些侵入性的实践，类似 cglib 动态代理就没有这种限制。</li><li>只操作我们关心的类，而不必为其他相关类增加工作量。</li><li>高性能。</li></ul><p>以上就是今天的总结。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String、StringBuffer、StringBuilder的区别</title>
      <link href="/2019/01/22/String%E3%80%81StringBuffer%E3%80%81StringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/01/22/String%E3%80%81StringBuffer%E3%80%81StringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>String 是 Java 语言非常基础和重要的类，提供了构造和管理字符串的各种基本逻辑。它是典型的Immutable类，被声明成为final class，所有属性也都是final的。也由于它的不可变性，类似拼接、裁剪字符串等动作，都会产生新的String对象。由于字符串操作的普遍性，所以相关操作的效率往往对应用性能有明显影响。<br><a id="more"></a><br>StringBuffer 是为了解决上面提到的字符串拼接产生太多中间对象的问题而提供的一个类，我们可以用append 或者 add 方法，把字符串添加到已有序列的末尾或者指定位置。StringBuffer 本质是一个线程安全的可修改字符序列，它保证了线程安全，也随之带来了额外的性能开销，所以除非有线程安全的需要，不然还是推荐使用它的后继者，也就是StringBuilder。</p><p>StringBuilder 是 Java 1.5 中新增的， 在能力上和 StringBuffer 没有本质区别，但是它去掉了线程安全的部分，有效减少了开销，是绝大部分情况下进行字符串拼接的首选。</p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><ol><li><p>字符串的设计与实现考量<br>String 是 Immutable 类的典型实现，原生的保证了基础线程安全，因为你无法对它内部数据进行任何修改，这种便利甚至体现在拷贝构造函数中，由于不可变，Immutable 对象在拷贝时不需要额外复制数据。</p></li><li><p>字符串缓存<br>如果把常见应用进行堆转存（Dump Heap），然后分析对象组成，会发现平均25%的对象是字符串，并且其中约半数是重复的。如果能避免创建重复字符串，可以有效降低内存消耗和对象创建开销。</p></li><li><p>String自身的演化<br>在Java的字符串历史版本中，它是使用char数组来存储数据的，这样非常直接。但是Java中的char是两个bytes大小，拉丁语系语言的字符，根本就不需要太宽的char，这样无区别的实现就造成了一定的浪费。密度是编程语言平台永恒的话题，因为归根结底绝大部分任务是要来操作数据的。</p></li></ol><p>在Java 6 的时候，Oracle JDK 就提供了压缩字符串的特性，但是这个特性的实现并不是开源的，而是在实践中也暴露出了一些问题，所以在最新的JDK版本中已经将它移除了。</p><p>在 Java 9中，我们引入Compact Strings的设计，对字符串进行了大刀阔斧的改进。将数据存储方式从char数组，改变为一个byte数组加上一个标识编码的所谓coder，并且将相关字符串操作类都进行了修改。另外，所有相关的Intrinsic之类也都进行了重写，以保证没有任何性能损失。</p><p>当然，在极端情况下，字符串也出现了一些能力退化，比如最大字符串的大小。可以思考下，原来char数组的实现，字符串的最大长度就是数组本身的长度限制，但是替换成byte数组，同样数组长度下，存储能力是退化了一倍的！还好这是存在于理论上的极限，还没有发现现实应用受此影响。</p><p>在通用的性能测试和产品实验中，我们能非常明显地看到紧凑字符串带来的优势，<strong>更小的内存占用、更快的 操作速度</strong>。</p><p>以上就是今天的总结。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强引用、软引用、弱引用、幻象引用有什么区别</title>
      <link href="/2019/01/21/%E5%BC%BA%E5%BC%95%E7%94%A8%E3%80%81%E8%BD%AF%E5%BC%95%E7%94%A8%E3%80%81%E5%BC%B1%E5%BC%95%E7%94%A8%E3%80%81%E5%B9%BB%E8%B1%A1%E5%BC%95%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/01/21/%E5%BC%BA%E5%BC%95%E7%94%A8%E3%80%81%E8%BD%AF%E5%BC%95%E7%94%A8%E3%80%81%E5%BC%B1%E5%BC%95%E7%94%A8%E3%80%81%E5%B9%BB%E8%B1%A1%E5%BC%95%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>不同的引用类型，主要体现的是<strong>对象不同的可达性（reachable）状态和对垃圾收集的影响</strong>。<br><a id="more"></a><br>所谓强引用（“Strong” Refrence），就是我们最常见的普通对象引用，只要还有强引用指向一个对象，就能表明对象还“活着”，垃圾收集器不会碰这种对象。对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为null，就是可以被垃圾收集的了，当然具体回收时机还是要看垃圾收集策略。</p><p>软引用（SoftReference），是一种相对强引用弱化一些的引用，可以让对象豁免一些垃圾收集，只有当JVM认为内存不足时，才会去试图回收软引用指向的对象。JVM会确保在抛出OutOfMemoryError之前，清理软引用指向的对象。软引用通常用来实现内存敏感的缓存，如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。</p><p>弱引用（WeakReference）并不能使对象豁免垃圾收集，仅仅是提供一种访问在弱引用状态下对象的途径。这就可以用来构建一种没有特定约束的关系，比如，维护一种非强制性的映射关系，如果试图获取时时对象还在，就是用它，否则重现实例化。它同样是很多缓存实现的选择。</p><p>对于幻象引用，有时候也翻译成虚引用，你不能通过它访问对象。幻象引用仅仅是提供一种确保对象被finalize以后，做某些事情的机制，比如，通常用来做所谓的Post-Mortem 清理机制，Java平台自身 Cleaner 机制里，也有人利用幻象引用监控对象的创建和销毁。</p><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h4><ol><li>对象可达性状态流转分析</li></ol><p>首先，请看下面的流程图，这里简单总结了对象生命周期和不同可达性状态，以及不同状态可能达到改变关系，可能未必100%严谨，来阐述下可达性的变化。<br><img src="https://static001.geekbang.org/resource/image/36/b0/36d3c7b158eda9421ef32463cb4d4fb0.png" alt="对象可达性状态流转分析"></p><p>上图是Java 定义的不同可达性级别（reachability level），具体如下：</p><ul><li>强可达（Strongly Reachable），就是当一个对象可以有一个或多个线程可以不通过各种引用访问到的情况。比如，我们新创建一个对象，那么创建它的线程对它就是强可达。</li><li>软可达（Softly Reachable），就是当我们只能通过软引用才能访问到对象的状态。</li><li>弱可达（Weakly Reachable），类似前面提到的，就是无法通过强引用或者软引用访问，只能通过弱引用访问时的状态。这是十分临近finalize状态的时机，当弱引用被清除的时候，就符合finalize的条件了。</li><li>幻象可达（Phantom Reachable），上面流程图已经很直观了，就是没有强、软、弱引用关联，并且finalize过了，只有幻象引用指向这个对象的时候。</li><li>当然，还有最后的状态，就是不可达（unreachable），意味着对象可以被清除了。</li></ul><p>判断对象可达性，是JVM垃圾收集器决定如何处理对象的一部分考虑。</p><p>以上就是今天的总结。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final、finally、finalize的区别</title>
      <link href="/2019/01/18/final%E3%80%81finally%E3%80%81finalize%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/01/18/final%E3%80%81finally%E3%80%81finalize%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p><strong>final</strong> 可以用来修饰类、方法、变量，分别有着不同的意义，<strong>final</strong> 修饰的class代表不能被继承、<strong>final</strong> 修饰的方法表示不能被重写，<strong>final</strong> 修饰的变量表示不能被修改。</p><p><strong>finally</strong> 则是java保证重点代码一定被执行的一种机制。我们可以使用 <strong>try-finally</strong> 或者 <strong>try-catch-finally</strong> 来进行类似关闭JDBC连接、保证unlock锁等动作。</p><p><strong>finalize</strong> 是基础类<strong>java.lang.Object</strong>的一个方法，它的设计目的是保证对象在垃圾收集之前完成特定资源的回收。<strong>finalize</strong>机制已经不被推荐使用了，并且在<strong>JDK 9</strong>中被标记为<strong>deprecated</strong>。</p><a id="more"></a><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><h5 id="final"><a href="#final" class="headerlink" title="final"></a>final</h5><ol><li>我们可以将方法或者类声明成 <strong>final</strong>,这样就可以明确告诉别人，这些行为是不允许修改的。在<strong>java.lang</strong>包下面的很多类，相当一部分已经被声明成<strong>final class</strong>，在第三方类库的一些基础类中同样如此，这样能有效避免<strong>API</strong>的使用者更改一些基础功能，在某种意义上讲，这是保证平台安全的必要手段。</li><li>使用final修饰参数或者变量，也可以清楚地避免意外赋值导致的编程错误，甚至，有些人明确推荐将所有方法参数、本地变量、成员变量声明成<strong>final</strong>。</li><li><strong>final</strong>变量产生了某种程度的不可变（immutable）的效果，所以，可以用于保护只读数据，尤其是在并发编程中，因为明确地不能再赋值<strong>final</strong>变量，有利于减少额外的同步开销，也可以省去一些防御性拷贝的必要。</li></ol><blockquote><p>final 也许会有性能上的好处，但是从开发实践的角度，除非有特别的考虑，不然最好不要指望这种小技巧带来所谓的性能好处，程序最好是体现它的语义目的。</p></blockquote><h5 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h5><p>对于<strong>finally</strong>，明确知道怎么使用就足够了。需要关闭的连接等资源，更推荐使用<strong>Java 7</strong>中添加的<strong>try-with-resources</strong>语句，因为通常<strong>Java</strong>平台能够更好地处理异常情况，编码量也要少很多，何乐而不为呢？</p><p>另外，有一些偏门的<strong>finally</strong>问题也会被问到，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  // do something</span><br><span class="line">  System.exit(1);</span><br><span class="line">&#125; finally&#123;</span><br><span class="line">  System.out.println(“Print from finally”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>上面的<strong>finally</strong>里面的代码是不会被执行的，这是一个特例。</p></blockquote><h5 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h5><p><strong>finalize</strong> 的执行时和垃圾收集关联在一起的，一旦实现了非空的 <strong>finalize</strong> 方法，就会导致相应的对象回收呈现数量级上的变慢，有人专门做过 <strong>benchmark</strong>，大概是 <strong>40-50</strong> 倍的下降。<br>因为，<strong>finalize</strong> 被设计成在对象<strong>被垃圾收集前</strong>调用，这意味着实现了 <strong>finalize</strong> 方法的对象是个“特殊公民”，JVM 要对它进行额外处理。<strong>finalize</strong> 本质上成为了快速回收的阻碍者，可能导致你的对象经过多个垃圾收集周期才能被回收。</p><h5 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h5><ol><li><strong>final</strong>不是 immutable！<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">final List&lt;String&gt; strList = new ArrayList&lt;&gt;();</span><br><span class="line">strList.add(&quot;Hello&quot;);</span><br><span class="line">strList.add(&quot;world&quot;);  </span><br><span class="line">List&lt;String&gt; unmodifiableStrList = List.of(&quot;hello&quot;, &quot;world&quot;);</span><br><span class="line">unmodifiableStrList.add(&quot;again&quot;);</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><strong>final</strong> 只能约束strList这个引用不可被赋值，但是strList 对象行为不被 <strong>final</strong> 影响，添加元素等操作是完全正常的。如果我们真的希望对象本身是不可变的，那么需要相应的类支持不可变的行为。在上面的这个例子中，<a href="http://openjdk.java.net/jeps/269" target="_blank" rel="noopener">List.of方法</a>创建的本身就是不可变的 List，最后那句 <strong>add</strong> 是会在运行时抛出异常的。</p></blockquote><p>以上就是今天的总结。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Throwable、Error、Exception的区别</title>
      <link href="/2019/01/17/Throwable%E3%80%81Error%E3%80%81Exception%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/01/17/Throwable%E3%80%81Error%E3%80%81Exception%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h4 id="理解throwable、error、exception"><a href="#理解throwable、error、exception" class="headerlink" title="理解throwable、error、exception"></a>理解throwable、error、exception</h4><p>exception 和 error 都继承了throwable类，在Java中只有继承了throwable类型的实例才可以被抛出（throw）或着捕获（catch），他是异常处理的基本处理类型。<br><a id="more"></a><br>exception 和 error 体现了Java平台设计者对不同异常情况的分类。exception 是程序运行时异常，可以预料的意外情况，可能并应该被捕获，进行相应处理。</p><p>error是指在正常情况下，不大可能出现的情况，绝大部分的error都会导致程序（比如jvm自身）处于非正常、不可恢复的状态。既然是在非正常情况下，所以不便于也不需要捕获，常见的比如OutOfMemoryError之类，都是error的子类。</p><p>exception 又分为<strong>可检查</strong>（check）异常和<strong>不可检查</strong>（unchecked）异常，可检查异常必须在源代码中显式的捕获异常，这是编译器检查的一部分。不可检查的error，是Throwable 不是exception。</p><p>不检查异常就是所谓的运行时异常，类似于 NullPointerException、ArrayIndexOutOfBoundsException 之类，通常是编码可以避免的逻辑错误，具体根据需要来判断是否需要捕获，并不会在编译期强制要求。</p><h4 id="throwable、error、exception关系图"><a href="#throwable、error、exception关系图" class="headerlink" title="throwable、error、exception关系图"></a>throwable、error、exception关系图</h4><p><img src="https://static001.geekbang.org/resource/image/ac/00/accba531a365e6ae39614ebfa3273900.png" alt="throwable和error、exception类图"></p><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><ul><li>下面代码有什么不当之处？<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> try &#123;</span><br><span class="line">  // 业务代码</span><br><span class="line">  // …</span><br><span class="line">  Thread.sleep(1000L);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">  // Ignore it</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这段代码违反了两个原则。</p><ol><li><p><strong>尽量不要捕获类似于 Exception 这样的通用异常，而是应该捕获特定的异常</strong>，这里<code>thread.sleep()</code> 抛出的应该是InterruptedException。</p></li><li><p><strong>不要生吞（swallow）异常</strong>。这是异常处理中要特别注意的事情，因为很可能导致出现非常难以诊断的诡异情况。</p></li></ol><p>以上就是今天的总结。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识图谱相关资料整理</title>
      <link href="/2019/01/16/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
      <url>/2019/01/16/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h3><blockquote><blockquote><p><a href="https://blog.csdn.net/nlphacker/article/details/39455663" target="_blank" rel="noopener">https://blog.csdn.net/nlphacker/article/details/39455663</a><br><a href="https://www.jianshu.com/p/4f09043e22ea?from=timeline" target="_blank" rel="noopener">https://www.jianshu.com/p/4f09043e22ea?from=timeline</a><br><a href="https://blog.csdn.net/richgene/article/details/80481044" target="_blank" rel="noopener">https://blog.csdn.net/richgene/article/details/80481044</a><br><a href="https://www.jiqizhixin.com/articles/2018-06-20-4?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">https://www.jiqizhixin.com/articles/2018-06-20-4?tdsourcetag=s_pctim_aiomsg</a><br><a id="more"></a><br>数学识别<br><a href="https://edu.aliyun.com/course/26?spm=a2c0j.103967.772922.1.7402ed64U28fhB" target="_blank" rel="noopener">https://edu.aliyun.com/course/26?spm=a2c0j.103967.772922.1.7402ed64U28fhB</a></p></blockquote></blockquote><h3 id="知识图谱相关"><a href="#知识图谱相关" class="headerlink" title="知识图谱相关"></a>知识图谱相关</h3><blockquote><p>百度AI视频</p><blockquote><p><a href="https://ai.baidu.com/support/video" target="_blank" rel="noopener">https://ai.baidu.com/support/video</a></p></blockquote></blockquote><blockquote><p>scikit开发文档</p><blockquote><p><a href="http://cwiki.apachecn.org/pages/viewpage.action?pageId=10031359" target="_blank" rel="noopener">http://cwiki.apachecn.org/pages/viewpage.action?pageId=10031359</a><br><a href="http://cwiki.apachecn.org/pages/viewpage.action?pageId=10031359" target="_blank" rel="noopener">http://cwiki.apachecn.org/pages/viewpage.action?pageId=10031359</a>    </p></blockquote></blockquote><blockquote><p>基本概念</p><blockquote><p><a href="https://blog.csdn.net/wyqwilliam/article/details/81676785" target="_blank" rel="noopener">https://blog.csdn.net/wyqwilliam/article/details/81676785</a></p></blockquote></blockquote><blockquote><p>小白学数据分析 关联分析理论篇</p><blockquote><p><a href="http://blog.sina.cn/dpool/blog/s/blog_13bb711fd0102wcwl.html" target="_blank" rel="noopener">http://blog.sina.cn/dpool/blog/s/blog_13bb711fd0102wcwl.html</a></p></blockquote></blockquote><blockquote><p>基于Python的机器学习实战：Apriori</p><blockquote><p><a href="https://www.cnblogs.com/90zeng/p/apriori.html#contents" target="_blank" rel="noopener">https://www.cnblogs.com/90zeng/p/apriori.html#contents</a></p></blockquote></blockquote><blockquote><p>Python文章相关性分析—金庸武侠小说分析</p><blockquote><p><a href="http://m.mamicode.com/info-detail-2159455.html" target="_blank" rel="noopener">http://m.mamicode.com/info-detail-2159455.html</a></p></blockquote></blockquote><blockquote><p>相关文章</p><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzUyMDk1MDY2MQ==&amp;mid=2247483882&amp;idx=1&amp;sn=e5e95ec19eca42e5247cdde60c12316f&amp;chksm=f9e3c700ce944e169315b1c59f8cadbf912d8ab39c86963261babe8f529ba1fdf125d4d0fb20&amp;mpshare=1&amp;scene=1&amp;srcid=011805dei3oRnSkOciocJyia#rd" target="_blank" rel="noopener">【Python金融量化】财经新闻文本分析</a></li><li><a href="http://m.xinwenlianbo.tv/wenzigao/" target="_blank" rel="noopener">新闻联播文字版手机版</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzA5MjEyMTYwMg==&amp;mid=2650242716&amp;idx=1&amp;sn=72e8c3ef7673d2134ac3b1ccca68d326&amp;chksm=887221f1bf05a8e704be8aca46b0a46e8ee853311427c4761d66a53de7c24e66eda528d0ae69&amp;mpshare=1&amp;scene=1&amp;srcid=0118UN55fesCUcwt0MqPLf2G#rd" target="_blank" rel="noopener">数据思维实践 | TASK 12 文本分析</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzA5MjEyMTYwMg==&amp;mid=2650242716&amp;idx=1&amp;sn=72e8c3ef7673d2134ac3b1ccca68d326&amp;chksm=887221f1bf05a8e704be8aca46b0a46e8ee853311427c4761d66a53de7c24e66eda528d0ae69&amp;mpshare=1&amp;scene=1&amp;srcid=0118UN55fesCUcwt0MqPLf2G#rd" target="_blank" rel="noopener">数据思维实践 | TASK 12 文本分析</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> python机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈对java的理解</title>
      <link href="/2019/01/15/%E8%B0%88%E8%B0%88%E5%AF%B9Java%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2019/01/15/%E8%B0%88%E8%B0%88%E5%AF%B9Java%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="谈谈对java的理解"><a href="#谈谈对java的理解" class="headerlink" title="谈谈对java的理解"></a>谈谈对java的理解</h3><p><strong>java</strong>本身是面向对象语言，最显著的特征是<strong>一次编译，到处运行”</strong>，能够非常容易的进行跨平台操作，还有一个特点就是<strong>垃圾回收机制</strong>，这个特点能够使得开发人员不用太在意内存的分配和回收。<br><a id="more"></a><br>我们日常经常会接触到<strong>jdk</strong>、<strong>jre</strong>、<strong>jvm</strong>。下面我们来看看两者的区别。</p><h4 id="jdk-java开发工具包"><a href="#jdk-java开发工具包" class="headerlink" title="jdk | java开发工具包"></a>jdk | java开发工具包</h4><p><strong>jdk</strong>里面包含<strong>jre</strong>，除此之外还包含着开发所需要的一些<strong>帮助文档</strong>、<strong>诊断工具</strong>。</p><h4 id="jre-java运行时环境"><a href="#jre-java运行时环境" class="headerlink" title="jre |  java运行时环境"></a>jre |  java运行时环境</h4><p><strong>jre</strong>包含了<strong>JVM </strong>和 <strong>Java</strong> 类库，以及一些模块等。</p><h4 id="jvm-java虚拟机"><a href="#jvm-java虚拟机" class="headerlink" title="jvm | java虚拟机"></a>jvm | java虚拟机</h4><p><strong>jvm</strong>内嵌解释器，可以将字节码转换成为最终的机器码。大多数情况使用的 Oracle JDK 提供的 Hotspot jvm ,都提供了 JIT（Just-In-Time）编译器，也就是通常说的动态编译器，JIT能够在运行时将热点代码编译成机器码。</p><blockquote><p>在开发时，记得一定要先导入 jdk 路径，不然是无法编译的。</p></blockquote><h4 id="java程序生命周期"><a href="#java程序生命周期" class="headerlink" title="java程序生命周期"></a>java程序生命周期</h4><ol><li>首先开发出源代码</li><li>使用<strong>javac</strong>将源代码进行编译成.class文件</li><li>使用<strong>java</strong>命令将编译后的.class文件运行</li><li>最后jvm会自动将.class文件转换成最终的机器码。</li><li>运行结束</li></ol><h4 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h4><blockquote><p>封装、继承、多态</p></blockquote><p>java目前就先总结这里。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/01/hello-world/"/>
      <url>/2019/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://imsun.github.io/gitment/style/default.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://imsun.github.io/gitment/dist/gitment.browser.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var gitment = new Gitment(&#123;</span><br><span class="line">  id: &apos;页面 ID&apos;, // 可选。默认为 location.href</span><br><span class="line">  owner: &apos;你的 GitHub ID&apos;,</span><br><span class="line">  repo: &apos;存储评论的 repo&apos;,</span><br><span class="line">  oauth: &#123;</span><br><span class="line">    client_id: &apos;你的 client ID&apos;,</span><br><span class="line">    client_secret: &apos;你的 client secret&apos;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">gitment.render(&apos;container&apos;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
